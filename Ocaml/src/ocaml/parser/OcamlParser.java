package ocaml.parser;

import java.util.ArrayList;
import org.eclipse.jface.text.Region;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "OcamlParser.g".
 */
public class OcamlParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LIDENT = 1;
		static public final short UIDENT = 2;
		static public final short SHARP = 3;
		static public final short LPAREN = 4;
		static public final short LET = 5;
		static public final short LBRACKET = 6;
		static public final short END = 7;
		static public final short MODULE = 8;
		static public final short RPAREN = 9;
		static public final short TYPE = 10;
		static public final short OPEN = 11;
		static public final short INCLUDE = 12;
		static public final short EXTERNAL = 13;
		static public final short EXCEPTION = 14;
		static public final short CLASS = 15;
		static public final short SEMISEMI = 16;
		static public final short EQUAL = 17;
		static public final short MINUS = 18;
		static public final short PLUS = 19;
		static public final short VAL = 20;
		static public final short BACKQUOTE = 21;
		static public final short AND = 22;
		static public final short FALSE = 23;
		static public final short TRUE = 24;
		static public final short LBRACE = 25;
		static public final short STRING = 26;
		static public final short INT = 27;
		static public final short FLOAT = 28;
		static public final short INT32 = 29;
		static public final short INT64 = 30;
		static public final short NATIVEINT = 31;
		static public final short CHAR = 32;
		static public final short LBRACKETBAR = 33;
		static public final short BAR = 34;
		static public final short COLON = 35;
		static public final short CONSTRAINT = 36;
		static public final short RBRACKET = 37;
		static public final short SEMI = 38;
		static public final short COMMA = 39;
		static public final short RBRACE = 40;
		static public final short PLUSDOT = 41;
		static public final short MINUSDOT = 42;
		static public final short MINUSGREATER = 43;
		static public final short METHOD = 44;
		static public final short INHERIT = 45;
		static public final short LESS = 46;
		static public final short WITH = 47;
		static public final short COLONGREATER = 48;
		static public final short INITIALIZER = 49;
		static public final short COLONCOLON = 50;
		static public final short GREATER = 51;
		static public final short QUESTION = 52;
		static public final short OPTLABEL = 53;
		static public final short BANG = 54;
		static public final short AMPERSAND = 55;
		static public final short PREFIXOP = 56;
		static public final short BARRBRACKET = 57;
		static public final short BEGIN = 58;
		static public final short LBRACELESS = 59;
		static public final short STAR = 60;
		static public final short NEW = 61;
		static public final short UNDERSCORE = 62;
		static public final short AS = 63;
		static public final short IN = 64;
		static public final short COLONEQUAL = 65;
		static public final short INFIXOP0 = 66;
		static public final short INFIXOP1 = 67;
		static public final short INFIXOP2 = 68;
		static public final short INFIXOP3 = 69;
		static public final short INFIXOP4 = 70;
		static public final short OR = 71;
		static public final short BARBAR = 72;
		static public final short AMPERAMPER = 73;
		static public final short TILDE = 74;
		static public final short LABEL = 75;
		static public final short LAZY = 76;
		static public final short GREATERRBRACE = 77;
		static public final short DO = 78;
		static public final short DONE = 79;
		static public final short THEN = 80;
		static public final short TO = 81;
		static public final short DOWNTO = 82;
		static public final short ELSE = 83;
		static public final short OBJECT = 84;
		static public final short FUN = 85;
		static public final short DOT = 86;
		static public final short FOR = 87;
		static public final short IF = 88;
		static public final short WHILE = 89;
		static public final short MATCH = 90;
		static public final short TRY = 91;
		static public final short FUNCTION = 92;
		static public final short ASSERT = 93;
		static public final short QUOTE = 94;
		static public final short LBRACKETGREATER = 95;
		static public final short WHEN = 96;
		static public final short LBRACKETLESS = 97;
		static public final short FUNCTOR = 98;
		static public final short VIRTUAL = 99;
		static public final short OF = 100;
		static public final short SIG = 101;
		static public final short PRIVATE = 102;
		static public final short MUTABLE = 103;
		static public final short STRUCT = 104;
		static public final short LESSMINUS = 105;
		static public final short REC = 106;
		static public final short DOTDOT = 107;

		static public final String[] NAMES = {
			"EOF",
			"LIDENT",
			"UIDENT",
			"SHARP",
			"LPAREN",
			"LET",
			"LBRACKET",
			"END",
			"MODULE",
			"RPAREN",
			"TYPE",
			"OPEN",
			"INCLUDE",
			"EXTERNAL",
			"EXCEPTION",
			"CLASS",
			"SEMISEMI",
			"EQUAL",
			"MINUS",
			"PLUS",
			"VAL",
			"BACKQUOTE",
			"AND",
			"FALSE",
			"TRUE",
			"LBRACE",
			"STRING",
			"INT",
			"FLOAT",
			"INT32",
			"INT64",
			"NATIVEINT",
			"CHAR",
			"LBRACKETBAR",
			"BAR",
			"COLON",
			"CONSTRAINT",
			"RBRACKET",
			"SEMI",
			"COMMA",
			"RBRACE",
			"PLUSDOT",
			"MINUSDOT",
			"MINUSGREATER",
			"METHOD",
			"INHERIT",
			"LESS",
			"WITH",
			"COLONGREATER",
			"INITIALIZER",
			"COLONCOLON",
			"GREATER",
			"QUESTION",
			"OPTLABEL",
			"BANG",
			"AMPERSAND",
			"PREFIXOP",
			"BARRBRACKET",
			"BEGIN",
			"LBRACELESS",
			"STAR",
			"NEW",
			"UNDERSCORE",
			"AS",
			"IN",
			"COLONEQUAL",
			"INFIXOP0",
			"INFIXOP1",
			"INFIXOP2",
			"INFIXOP3",
			"INFIXOP4",
			"OR",
			"BARBAR",
			"AMPERAMPER",
			"TILDE",
			"LABEL",
			"LAZY",
			"GREATERRBRACE",
			"DO",
			"DONE",
			"THEN",
			"TO",
			"DOWNTO",
			"ELSE",
			"OBJECT",
			"FUN",
			"DOT",
			"FOR",
			"IF",
			"WHILE",
			"MATCH",
			"TRY",
			"FUNCTION",
			"ASSERT",
			"QUOTE",
			"LBRACKETGREATER",
			"WHEN",
			"LBRACKETLESS",
			"FUNCTOR",
			"VIRTUAL",
			"OF",
			"SIG",
			"PRIVATE",
			"MUTABLE",
			"STRUCT",
			"LESSMINUS",
			"REC",
			"DOTDOT",
		};
	}
	static public class AltGoals {
		static public final short interfaces = 108;
		static public final short toplevel_phrase = 109;
		static public final short use_file = 110;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9piNGUS54NMh#uUeWcK99bD821XGP8h2uWI14M45HCgaaL9Yug8YYn6Z2Zch9ZJcJ1xvfo" +
		"pec12GSzqUjvvq$tzwrLLTtLFTS#iBEvotyxxLLTrlLUl$lNgLUYUdXx6bYrpkst9v7bkDx" +
		"Oh6yf6u6pdBPdO1dVdz3fslUSY$d7B8Eynxp5nLEGqPKET8fxdv3jT41zYlyO6uBZGccC$u" +
		"1rY8lib#nNl45Ri7MAjjXwoBx1Ui9wtNhHUibwsNh7ViA#9IBzglvofWpLcZUp7m7qKuJ3x" +
		"xpW#mUgcJZVLnneuhUoh8bflijQnRUqvzXJxIEj7wr$M0ljqjywMGLOPM#NMITLZDpbkgaM" +
		"gd$DxYgLQUh#2LtVB87OWQ#ZMjS#qkzklsztidQatkzexWRVrba5emNRkrbeBojX#QC6Xu6" +
		"srPH3RXGrmjmgrO09QS0PussuPn4ginkwsMWiwfmv02yu7RvijWrZpL7rtcw05gNrJJT22g" +
		"y7hMZE9bKJEXxFURbUj1GrPC#g3hcwNcaciU#GSSu$RHVEY$gmVMl0uU8Dg9h7YoFb0LkeE" +
		"qbhGW#s85hm7ti0QIgF2vpGN3GnQu8vYRT22DU3jLaDfTFYSl6WthGMZMHvvqMvkISqagrl" +
		"u72sun2snnxAlsCTiPsiG#u2toMe6tgurap0EGkTMFtOuZZruIzW0UwmzYXtAUbk3m1jGCu" +
		"drZ9oNiFCGxs$riuUowMZ9lcmdTgCrmXsGhiOFwvF06nGvX#tJQNji#bj#PG0lAc9TdNmm$" +
		"bjzn7QBvpcj8hAph7uu7cdri1wr7hCUjvwmdcG$fl$h3gwXT4BqF3K5nuRLHwcfyJpMAv9p" +
		"8vj5nuK8VTqRSIpXnu1e17H2gg7ReFg83KtW$JTyxht2$iEFrb2a1dklu5Z2Zm5HcmeS6zB" +
		"$v6Ht5l5VIzWpnFFsYfnZVRPcUjjL7x5z4dWbaVFER1pYhQkFqXlZUK0RFX$ERa2yLVKHqC" +
		"RosC#HSypltbRklwkHzeZdiPyZvqjPXVjlRyVg8tVtU1uxA79#Agj0tABwY1sMm9iIEM$CL" +
		"Y9kNdt4vYNmZesSOo#Bk5dr4JivWNTQvFmZzZ7YfjL7xY7nFA0DorxaNeIuIVMHUs0yZvqU" +
		"aRtGlH1ne#eZTaO2RtdutAfhrV4QkRzN7#4gAvxNCtBEhu9$T$zLVSGkJk1T5Jwtyja0zr$" +
		"U3jL7xBfudZiqV6uLiNw86rSViPlZUTQX4Tb3sIs8jwy#SZidy7OAd$Dl596xNJLIftWUhe" +
		"b2vzPLRaVxB6$RwYEtA85N63xdempnDjL7Ra42BpzydbvdtObShnefBu7tUiPv1zVpwbOVk" +
		"UqJUAz6pzrsYEjK7xbj4tYlHS$TDeXJrKTkwmJUAz5pjnLYf$h8RPd0sp5yJbUHZcTL7xaj" +
		"4dZDm#U4rl9OzH5x8e7tPFZSUTBvkyVSQlomfn9upuJFQG$ckkdg8$Pq0k$PyBbzitqRulz" +
		"M7x6N4tYlXC#TCvsp4FzHVSHUJU2z6JvFhxDlHBoPlhVEwRljzzZ#SRpqkeWi$yQIV#yzqN" +
		"xTxcJlp4hiPNPNQogcYxIzn5ugxl6o9cm7Tx3RkFg8lP$0#oHopjlKs2sjFcBh4dZVXC$j7" +
		"p0MIzt$L1#nRnDuruVF#RTXY7$cP7SMyLzBxFi4tZ$2vquBLchDT7$W1BG$$FMK$YQUX#kX" +
		"y7bdvbepFRlwY7dnFAjU#DnfxRJpRBTHzP5LFu5xVlZSwUtiuZRo6bOVkUV5ywnjm#VEA5Q" +
		"Ak47raRLT0dVVyBbpeBKzulhLHrQB1ExUqNEhDOxrge#ijWdSVSFdi6qXuchynjBvo1qInu" +
		"joh9tP06#xpDs4RKLs4osSzTNvlQRLoJqezdlDPP5p$etBreOsEP4sjNI#gyxv1UlomR5pJ" +
		"uIJNczrzXeQsbGdqgRMpa$LEQx9zZ4yfqVuFBt1wkhLDxIfNgHDRPtVl95i5HjWTxPxU2Fj" +
		"1xoHySIAlP4nJ$Sdb59aVsH$OZ#6#544$dJ$IFi9QfD9zdtxNMTWfFQXh9$pbVjhzP7LCvw" +
		"7NNRet6lEhUerXrMRmwf9ttWMUyrZh9hZTwQmQdDOjJbPjRdzXBMBrJzMUg$ekJM0VuTAQ9" +
		"i1RJEWJVh6izXh5eCsn#zCWROPq3OZjCs0TbThO9oiDJXoFiGQvZLpVwa#mXusbcVj5Sdvg" +
		"VeelI6UvnmVoVb7zP4rAfxdh8Za$5XzPEsVm3iyalDRzP5rT09lTlZS6q6ZVWH6$GYC#X7n" +
		"X54$8cRK9vHI96V#4HZr8sZKZy2eRsWrCCfYvhVcXlFS#bLDwM#jOqJAEZx2ky2jZslH#h1" +
		"CFxU#lPpd#Qjb1swlz1$iflGVfEKFLfB#GoTVSckxRsfMwYXxG6f6QYPawrKrMNMjhKIA$H" +
		"Zci3dWteIun3qDvwTHxWft1TlNsL5WOvUwAxo1FD$kxDw2548ykHD9TZYxaas3dX7k2ki4o" +
		"tQsPtMIIlcbXmF7SCGZU62dU0F5yyycMRI9MMT7SdTZAMkctTcw3AcNlDtYoK9Wm#Yfngtj" +
		"t#qlxM#TXrW$riTUdbHA4NkUZS9Os2rL5w6ErHJwuA5if57sKpuM8hbjhF64inTI#tbjued" +
		"ryThO$x0$8wH31TBKoNQPjKzIAR$qPFS2DWYn3IrxizszDkcFhNEi6qoot9wiRYItDPl5SR" +
		"9hlDPMIwzr0dq6YGA5rFjC8jtBkZwnb2Gsn7gBVOTubTVQdS1kuaVhJMi7awnxcpl1lIsIE" +
		"v5TQCt4yIU4zTx4JBARsOtihS5TuKsqkbjDV9jU9v2wvoX9Qx9T1FbjxUrboHOoPdPB#cN4" +
		"TtPxzWSq5LlNs4tSSwnhULcxmBRjb5tNhcytj5lRRUqyTZvzxnt6SJ2xqBqPnvyGqjx1yGI" +
		"S1mDdN#SuXJIzLY1DAgN8UetFID1oatUmkxzxW3Z24qoojmc940rtZd6EzOQppn3MUiFZYP" +
		"LumwtRsMBs1VkIaAevBJ#fb5$wSsSc6uNQ9dd3tNFPBEHSnCwn3Z39ad#U6ydTmnhgdkljm" +
		"GF6#nxnPCs7r1kXyNwa#uOzo7AiuvBA2N8yZDVnqCB3VXYnEDhzh9H9blMXVW$bkPzROwrn" +
		"xkUfNP6wm$qydkmd4RWT#I$Skt1DwRNMBAUPyqbIAKNEMliAzXtg#2$EofoMTCp3l6sIVjS" +
		"jGmZdVMhznxhJ$PHjT3zryn5YARtE$TI#s7hAUjfwndhMUYv89PLIb3hQ#PlzEceRwdxgD4" +
		"iTYTIUrantEwFq#zO1xllXF6#eqv9TxmrDxU8DTJjuG#C9$ZdKtKxx9OTuyhwklJwfb5zwl" +
		"FKtzrHeG72QkQSZTRhpe6MiaQ#ncAr3UUuwfuapsbt7FaDOwwwB9wnxw#pls05y75djxFz8" +
		"d5jPzoQLyaj$dkh2DhZhq2lhKctjjznrV3soxZF9sYEirrCz8xbhsONE6pX#Xh3MJI2smbs" +
		"BUQc4S0wtcgRwfFfQ7Qscrev9fVpIdxiNfBf1GqU47TsRSDmzrSfwtoHBw$j7aTpFs8Mfnk" +
		"vdzbD8lUH#5a$0#Hbmbbh3sOji5Hz7x2RdMwkfyu#aKegSNz9VUv#wdtaVkv#blxRsGEfJw" +
		"sD#bacfdbQ1LH39NOFrw4Pt3Ve3ANTDF07d6gkxFTpxaAr8zM5Bx5vMA#j8xqFhswHIYb8Z" +
		"h0tU1z3m1g#BhNBNU1#mc#pU9bdh7#mau0pbUKDWpxrml9wdl27nXFLe273kOuzXAz3ltUt" +
		"zxCkiLUbrrWwOFnFA2KA9dzDhlI7sHcWQXL4on2vbrsFVP92rnq6w89pdVc4zQE$bVf5AkL" +
		"$OtxjVn5Dg0cGBxBliqHXBWwoczhtE3lRbR9HzOr8fHUbrgR7scuY$TRzWWrWV7Aztxd5wc" +
		"cJjo#pdqB#XF6zmQlTKLsymLeR1zlVUu7YoVl46EmVRNpZDxKkywvr3xNlJwvooL6VhDzWp" +
		"ePmiFHohmd1esCiRdFuMzXpix9yQOltR9Cj#H1iEZkGEihiuhtg3d3UH#juR54#fdf0wrFx" +
		"6ANIEIkt0Li6UHxERCCViabHAaJNS7cBluGrAVmjDFO1pK6ehUqzxc4dMUSygS1P6SaljaQ" +
		"djlT9K6wI#zqeJw7f8x6$$sngUwknTJ$t#jRrlghCzFf2ntBZIzi7s9EyZn4SWJ4lrHzv7z" +
		"b7sN9Ci#z6UdTeddET#mYwqvxcVsEKyvNwIIMB$2UuAznEhk$EwVGnROH#7rBl0kiW#mJur" +
		"8e$zfqora37sdyvg#npxNBkzZJhiY#nBiV$yoBxElfxuaVsdVODzYtrhMAlN3pXlz$hPT$A" +
		"Kryz4j4$kX$7Up#gUQcJV3Pn$GwgvlTf#o7xOVZeYpVV9uHo6y8pzhFqyuXSGtiPLLHFxG$" +
		"i3#qDVXd3AzCVsL$QF4HHzx9$iVtbzdBsH#jxhOoB2sSV#Bq8wbUymnt8SfmtwlPwpjRETq" +
		"pOYpN66SnZqjtSwOkxhutH2s8dZTBfYjEmi9QGznPdJpIbs#aTGxE8CGFbTU03ENKn4E7Tn" +
		"TaKeJNLq1ZcxeuQXmBc7Cy8vp3aq8irnXdCOIavm3l3689w1CDcP0fnpd4ETsL92uQGpvqJ" +
		"eNnH1qHlh#mauNizJNkzuGh$tHc$lxPp4LZYd8BM$izGv5HfFIogbo3dTET#vGjJZNEXS19" +
		"oNeEobWGJX5BANfNRdSY7g1PnNUhsSQxrUravUhtW2pbv0Tx1pYtE7SwTplxFQ$T1vnddMU" +
		"I6fbABKIET5gmlgUGdXRUST7Dzd0vmFTHdWfDZvrDhP#IoYeTZvqjde5LkplUBK8AyudfmV" +
		"4Jvp$ktyn$alUyP9fwoKRRrgVP9ga5HAKMfRq3Q8jqDecchc5RC1gHrJxNGPu1IoxLD5tdK" +
		"H3JrJnQbUEFP6sCth6K#feGXxfCQazaoDIerEZGUDIvMb3lJIIQNyqeTvlwSc8VKlf2Txlz" +
		"bDl7#cfgTc1nBKxvHoLdl$zNw9QEZX$UpzYEFt2DyXnDCF2F$m$aYTulqdLP4wDNK6av$4K" +
		"fAKf0YCsKsYPGbdI3P4tIclkmhn92HCdwHIGMcz7WsdBq4uGx8XwaPvtLI89o5Xn9bGAYYj" +
		"rwFXz2K8PqWsH3jJtiugn9EGCE9CA1MKrki9TEaom1cI3L5NokkgWebedfSIHfnXQJxFXtF" +
		"yae4Mtvv2GitpT6RIwdMXl2ugc8XmIWaZph0qnndEyKi6MdoSGaBXf3EJLgypvNLMmKI4Kq" +
		"eOSOQbESvmZbyoqEBZ518A9vsPj7exKTvEAcIIlAye9Omum$8SfqYra36$hqWVkxtIukFa$" +
		"EXzHODMhnFbTL8XaoHEAM746PRdE4MgXOp3E3k5S7A#6MSOHqVAwwX29acSKiA8CopFSOfK" +
		"2nc7SNOCuUHy7oUTvPcqUaMKLwH29acSKiA8CopFSOfK2nc7SHQ5S79#W9EVvPcqUeMKLwX" +
		"29acSKiA8Cv25Fi8fpbh8E8opC8Ipq73VEwALa$inp#D74J99NXz92TCd8i#lZqIgXOn3E8" +
		"KMXPFuHfnXhTwkX7rN5J99sbDA6EqPo1OXS7kAinOo3jjprv0zTusrfuvXXbT2UIKgP9B4A" +
		"IMCE0FP8WIEKvora74OPqa8PqaipZ2E0PGtG8Lu4X96d0cbWj9wFO6k9DaGzQUy$Yh4av0m" +
		"uame5PJMwmbq9Sc6g2$bzLKXdeI44MT2gQ2qNa#WAqasH0MKLw12F0a98yw4Ka5flPv0Lv9" +
		"iYF8fBr#5U18IHfm9fOBIUZs1hYJP4BMblBOgP98SxrB2Y3EGBKBWursSjP1nUBoJ5d#yju" +
		"qTxs4ShIYlbGhn92ICE1DA1QNrUW9TIR8XefRoemZn92ICE1DA1QNrUW9TIR8XsftoTbSXd" +
		"eI44MT2gQ2qNa#WAqasHCCeRvWAyIGaZ3WJIWMbzNe2NKco8TgJylPK8Pw4X15dGgcWj5vF" +
		"e2j9DaGqklXHX4oIurrA6746iaK8VBoBinOo3eztqkAFzxpOyHx6qO7oEgYGIHAdb33Y36I" +
		"B43XESTP2nc6S7K8uEyJY3EDeJtdjLSWaYLDA6746iaK87ASuQo7ZCCxs8PpjpJZJ6oCusf" +
		"5qEnKoIUAK4kdr2XrIsDdOer8xQx9521odE6iXup3ETW5Ee6aNQyymYjTGMubumxipn1veV" +
		"UBi5ZpDnjvW3pYFEu#YM35ZvYS1mUDFE1p1zd1wiAdEOyuJzb3dBNSbUn0bB6k4VJnRpUjr" +
		"7c6FsESvh$0d0Tdzuab0P3$6RcEtiplOdUmkzX1xc3tANdTUiwzAV#LS3EvOvmBixCVpDxp" +
		"Z67h3Eo4V8v231#IGBuS5YjFVehQJioEt#x2zsJ5EEJiBASQHSvpk1Un1cryLxEEynLRRkw" +
		"RN2kJUFWev6u1MZ38WPyuXzbMoHoOuhpdBqbznv3Y6tqsVutj4W6KxzcCoNv3pbbEEU1pX7" +
		"oTB4jTv9Vrb#ajtEtv4F8xdsKEj1wqph8Eiqwo7hH50$PhIH3QT8spAIgobriNMpkY9CLP5" +
		"#YjunMnXK#YEzuQvwVNk6C8n9hrUs3GrtDa7td0bcqQcMMrDSCS8cxfZb4qvEgCtS5jU1Ix" +
		"6Xv19hwVt$REmJTE$wWGf2j4yCoUGS5V2R#6ry6GXlOh68ivW3zJiTkPU2yvw6OIkzV7sIF" +
		"zgNU3kI$ROrzUQWSpTrtuCTJoA6FPmxxAV45xatiMSr26fEUcrEbcBqskX8vJdNa37kp8vY" +
		"k3HgCEXk#4YntlCwQ7$$uESVv0FJQj8toeUW6ELEWP4FSAv0z0ZewZeCwAUICthT0ANGZJF" +
		"p0aal7$p2gmt225oh4P8F6VrjlgmnwrjKgKI#pfMFxtElPvByADxFL1Vhuu12LdtUgU7Uxq" +
		"zL9M5rX6Hcd$H2J8KedbXJkgqi8GpZF5hztdW72UbzQU5Z$VcsNGb2tvv#XVt1Yx1Z#uDra" +
		"Jt1lS6Rnu$1kJDuxhS6zW0zmPfTnOWqUXddS2b4CqpSpG9zB9xfaY97FTCzqnn32ZzixSu$" +
		"JEFXIvliObezLdCkJIgbTrH1dOFr$oJJf2X4CqpSm89gk$Hz4yqxdZE6kzHxr6U5n2hb$x9" +
		"Em7XKQNFEy54f8lBdQ3l908a0NbNqzFrLziz41xmhiuaiRuZBlQkZbjJIIxq2N94B9wkvxE" +
		"6zpezNV#w$OJtEgHUzrw7pEiwyQVhlIi9rvN0TILmNPb94jULm7LbB2x8gPxZ$coDe9825#" +
		"BKyG6krB4qkvVmsKp9M3lhkml2TNasahYI91W$AbnKpmYHJxWk5qTEJbyStwFqUtvu3zptG" +
		"iJvbsKZYIj9Wl5Z11Vb4wBBnD6NV8VIx$ZX7UI#4oBElpGRIUs94lmOmQML3CfJ$3Qbt$R3" +
		"syXzEqISVqasajeJ9G8vt##raa5vYj#Yz5j#U0kvRuM8yo$EHb9xeaGWv#FIIlAHe4ckuId" +
		"Cx1TRPVmiLI#rKFzt7siCoQxCHb9xeaGWv#FIIXAkG78DJm7NIk1QIRWMHN1nsOkoaTIUA1" +
		"78#RYqaeGha5p3Ky1r4N1THBWMHt1nsGkpaTIUA178#RYqaa5vYb#az8j#U16vBuQ8yzVmN" +
		"NDgcRqmLS9tYQbws6M5q6EMUCb#XILVG$4F$w#34dii$vSiI0xYzMcp9SQY$PYtoCOAHlCg" +
		"mto$o4JKYaNsLIAbFhHhtZEoQ$wdJbZ9AEZahkH7oyhaA1BNSTx3l0wh7#Nqy1xcv$mOKFg" +
		"Vtl483wkQlEDDHDYvtF7I7imUAsgs1eNhfMiL9gpEVIPgTVU2tApkFIJjGrRt7kBd$1WGhB" +
		"uGg#n3ljKNceXqBOJL5mOsj$fngrizmbRtFWbX$oIAdL#7SEoM5OzTMlt14FO7#Ja$1YHt2" +
		"0ygx85DFU5ZBrj3USfxsNiPs5$MoNITHRu#BSxNKmjojle3l5OV#GFU0#8Oa4J#W8$Sjwdt" +
		"4euzl9U072dl9Uyb87z99nDoxwTax8GcD#mlfVy3d$mFnovIEf4USJLt9btDdMa$eNRCqNr" +
		"pok5Nj#7vgF9MhmJoEqB#SWS$vyU0uEkhOVKxV5zVxQt6ldcrJbBNQY1$WUyfhIkjir3lBU" +
		"JhduIHimUiJwqr0JBhQXsPTObrjz36LmJw$8tT9rCFfcWsi9Rp#qUfazZTx15sAyvFGkRzY" +
		"5TQvp737GCBLnVM2XqNQVd4#iPQnE#CYP0TLteZ9xzR92xaFEZd2Kj8NFIvFxtH4gklyKw6" +
		"2PTpExHkI6$WnvnmRI3fdoEuDcJ1jQ7Ik9uclL#8a0EkBo3tTTHUx88ikBweB2uM$kJaNyu" +
		"3$lzf0PVTrLx9vaXS9H5S$2wNzAyuNCuzrWh$JMRCfNiFhhm3mOvYHulpW9lm7ZGMf08Tpd" +
		"rwIP7dbdgFg1JFynxXv$oeICbwZrWFMbTO5rcNMxGckqy9uYbnBdHR5rhOhTeh0gvrgPBD9" +
		"5sFqkHhazmWHwMWqx$J67IPrFTtGJp5xpJo5B$Jw4i9$bD28evqFJpjxADAazvvYYDo0ir6" +
		"N4BVau9uYd0z6S4b#7yN4d6aw#5f7nTnxAyLH#G4cesuXBud1F4KuNeYWalmdnGISQJhuMa" +
		"V5t5I0nL7v0IQZRY4liS5yHJXUZo2I$2V419nfEiXJGUgqYe8ZZWBD6l$b8UFtTMQeMJTnm" +
		"JnLFghz5VYcFxABotuZmk9EDBry7HGMWL#j3#rxnSyfrpaaRqkYjXBw7jK44#HlHwrfbc$S" +
		"di9T9B$c9288rqFJ$jrFAg2oXEnTQp8C#8I#XuHn5E42odh0QqV1VzH8H57kXwU3agheF9q" +
		"dlk84HVFlzLzM13E7oPS3qTm2VuZGYAE0fue4vHMGUNfFDHemiNpxt4V4eJpXmWNKg8VfPJ" +
		"WFomauYZWYJ91QHLKdeYjVuey8owXRxKWdY9SgoEu1FyX8H57kXwU3agheF94RFqXyepZKU" +
		"XxK11FKRbWNo3q2Fvg8H57kXvTXz8hE3GUYSTtYoH$gxN4vRj7pMuytrhitYy8v$UJfllj#" +
		"#YRB#mMdQbMXUG$A2JYAE097Jwk#rLGUJnE$vi7dYTIEYbPzm51F4Nb7eZOI$3l5n9nfElH" +
		"TIYzYkCSmUFqxppmF97IIScw$GNn56cAF4Kd#Gy8YJZIzUWwb5x54MVfV$70yqHA9oNhzXF" +
		"4KrIkNmINuFSN4d6awz5rABsA8yxIl$70yqHA9oNhzXN4KrGkyZIVvFSJ4d6awz5rABsA8y" +
		"vIq#3fPJmlymfToRfz1F4KbUiJmINuVOL47EbwT1rAh#A8CuaBUKPSGjykWdYAokqImINuV" +
		"OH47EbwT1rAh#A8CuaBUKPSGbzlGJn5vNf7S0d#Ba8YZdGzkWwbLt74cSI5F2CkeQ#N89wY" +
		"ShqYk0I$jv288rsFhaFfLHnn9d4XpuXBw2iMn5DKhZY2I$1x2OauqlNeEfHUnH5d4XVoZBY" +
		"4lfw2U8hAzOpW4lnY8H57kXvTXzBBENIdeWIfsx7st2xojFkvXrYBWnfnx268fx3sJ7Jbxz" +
		"ROmL9Ay7iAYJZIzV2qZwk72ZAlHEUvFNHSeNpcTXV4KyYSwAfVm$qWfGI$Xv288rsFrCHKI" +
		"d63d42pSJyXzDqdYAT8MjqtKgK5lxkGY2DTZwv3wHKSQphs4$VfcetxBw7lNa4yHVilfAo5" +
		"slvByEyJ4d6aw#7feBGAAa$deKOJBg7lRu9uYd0XPPseuHByUuL47EbwU3eehOBAqtceqOH" +
		"BwBj744yHBgIiapLSWlyt8H57kXwU3agheF8GbmIQAH7u$Z#3V7MFdfw5miSgZZvpmk#vGh" +
		"AOrO#vvyhVCSNIQzcll3o$vshoPdMtEBrMtNFLtj$AvFjR6yZtjpBxAXsNFTbujpZBlM3kp" +
		"OmfAuXxmI4hoE$DvLtix#WkzdVs4#vtiCrtwXWGoH8kI4bx$HbSWMTmR0eNwOzy2yPnENSd" +
		"sEkHYBtcXt2TK6bSm6EzgjahU897$9fcDs4lx#xGjtDtUtSpney1sTToISHNfGQdrwJNm3$" +
		"MSA8d7FCZzywPab1IKHA8F3dIH8xtDtxEZm493JmMgIIBaSGdwK$44OGoRbwqNYNXIqL8zg" +
		"FyjadaM8Fe#G#cNuNfMaGg#F3P0AKVj4uHim59V9R#J1n1AEDsYDQh97of2Eari998ZlPiY" +
		"j1WzUCILe$qPmQRRUNRZCj#clvK744euxQFrgiaVAa8EMTpHDvSsPiahNj#mE71tSWb#D7T" +
		"Y56oqTtepUN7WBovtjpqfpGkDqh$tpE4KjAV79SRpUFItK3pnGRC5niWjK4T0zBcYmtwkBG" +
		"tLCbyiI46r$U4wtlW#XvItwjZG1gkxtLSplP$4bU9FrzmNDzhgBOIymNX#fPmVGjStqBgMt" +
		"KCICFrRPNChs5StsguHWUulFVfgRBtCO#zZ$daVNKCAC1b7L3rkApv6gv9rOIBFxbPBi25v" +
		"ts6wmb7$X9DudgNSBqBNE#YrBlUkquVVWp8wUTqaElH2rM0QuuHrvaQH#1wat2z2LnlWlSc" +
		"Q0uT0vhZpH6uKbjN0QxPHbn$rpW2r$E4wtdWUXwyvq6pwHZGR6#sm0MfJSTrf17NMnf7u7g" +
		"1SBq0N2#0zmBeI3e6TAHtfCHL5VququJBQgDn1AxN2DThmFKQUA#1Pj8ne9dUJDcFhQi0rm" +
		"mZhlOQH#2wXN3T0botW7SBQ0OT0vhXpP3skgKAS1rjn7MOnX6uRY9SDm7NJU3T13gQZW4Tx" +
		"HqjSTrK1RYECkBwKEC8NAi8rohWMWNUAj1HT0peAEyeYMjL5U2QPS9bzzSu0jUDXEj6uBeH" +
		"l1j1i#WOq2nlbiHrOnNWccx4zPl64RXk85mt0DSDuDq0cax7WAPxqoMk6we0rpGJBgUpnX6" +
		"uNYLShm8NhWoyLq7Jw1ZGD6#Q78$Tgm3NL2EkxXf7uBgPSDqCN3U3TpDeAXq3ckfDbVQwUT" +
		"DngKy4btONKk0AheiCE#bjpDUtcm7Ny4hXskulmpMnKhWQ$sMufbSArmv$6Qx5bSBLz2$3T" +
		"KQbS3N$ot3zKIbSErOnBkrPNewBtmd8$EI0grNruRBwSLnM3oEkDZKKLxiQYgj33SMLNqDn" +
		"5TPGN1sh75TGkxel$MTm7L1zk1Bdh#ar5DVC6efhSGt5TL8DnNLA3SLLKKDndLP3SLrPGt6" +
		"jgg6uNgoXkDwfcRYSUsiehdNE5mgN$asV6LUblkbZcJa19z32ZmPStmJVzEdVe4M#ZrIKvN" +
		"k#IEqPEG4dqCAF1bpV#xW#rRzDZdmRgIYdRvFzsZDo0awWnVnjilDpy6so$broK2P4kNsNh" +
		"6hFo0auuU#I3RZ#gVmh$KdOxqFVU4lw2$t#NqdZqNglikFHEidwGDHjBJ7X4a#UsOzvzuMU" +
		"LxZFkyzQn8y1fGxYaf0puBB$MNbSzgyvuLgZS5bbmBKcLSzQ5FrDjRJjPfo$j6UMBWHbzAE" +
		"KMcfTREzk7sAzQrMm5Q0be2YkcpSLbxElm6KFjW#AFaibhuTEKhYi9GeNnU#AfoUaRGsuh4" +
		"LLOQ$mhyxYS3dphOkjq3nClzVyokZt1bpMbud#zKKOb$LT3S7rTIQky6yH0bmc$zBxKSfMi" +
		"NzbxySmBculbl4nsyk4AukzWj$TciVZdx1N#llqzvZXlwVOQ2ybeQIY56vha1F5fMiHgNXS" +
		"aFak3M$WHyGtwoXzaX9AAaeHN38dinzrBI8Ltu$fxoBhutUPzMVlH#UvS3$gbWhIqNxqBNM" +
		"gLU6dJnTMspppVILndQdXEhS6uJfVmtLp3S9rbuRhxSsCo$Vv81t5fVjyaBRN1RZiTLM6go" +
		"HYB#qvUvEzxBL8$G8RJGGsUf#ZKr9Lzh9$fk#Hpmli5Nxgt#TapglqxIJdEuE3fdddUUV9x" +
		"v7FgtPSUrOzBYQ#Tpyt5jUvMN21xsXlP$BEzSwLkCwj0bmhud0v2v9nESiHBWzmEUVPTmXS" +
		"pZcRxlVUV0rNwEDpn7CAXzDp2eTZVtyuU8U3vjCneFdUVFigmLKwJBZKVxWp9eA9U5abOVe" +
		"WltrKMkaCT2ijUWhSlGKXJS5492abZFM7IeeSfJFGhIJrb5xgJzNVROklVvxuZsMav$5W8f" +
		"AS9uAn$b19aIDIGInhzJNuSaS9Gfg2YKXIIfW#uP8YH#aCT2j9FGNkT458Kp0HIKe9O$sXa" +
		"Y97wGnqAqaz1Uu#Wf2cO2AIb1B6#aCbHOxI6UXMadeAtBdK$oEGdik3YKXohWZ6#aCbHOv8" +
		"1N4WgQV0dIK8QGec8aafOQm$L5BaA9s1RYMffy2T9WXf2YOYIIbXh3zKKkGedO5k9Qcdm9q" +
		"Z26aA9Y99AM6iFrHIv2YTWMubgQV0dIq8QGec8aafOQm$L5BaA9s1RYMffy0zMX3I54n4ab" +
		"B2M7#efCXHEWFTIb9FWNka8AGfc8WafOIn$b19aQDq1hgLf9u2TwOWf2cOY2IbXB7#K4cHe" +
		"tG6kfMadW9tXY2aAPY89AM4iVvGIP6ZT0QwbQIU0dUg8AGfc8WafOIn$b19aQDq1hgLf9u2" +
		"TueWf2cOY2IbXB7#K4cHetG6kfMadWBt2458Kp0HIKe9O$sXaY97wGnqAqaz1UwXWf2cO2A" +
		"Ib1B6#aCbHOxI6UXMadeAtCC58Kt1H2Gf9OprXqgA7AKpqAqazHIuXmb2ceA9I59A6EiFbH" +
		"GvIcUWMqdgAN0d2KAQWeb8KaeOwm#L53bAPw1RIUefS2SBGfg2YKXIIeG#uhyh5Y5$QbHQw" +
		"QIuM9L4BDz9vqxcxwG3zt6fH$v3flkuzOZrTpOs$frqz8QgCU4tNhbb58iTv#CgZQkpaS4R" +
		"hwoLIDErdhCj$#yAI9obvCBlodFuMqGVizsWeVOVxcCS5pJ4upA#yIguanAy$qhnV5oFEVE" +
		"iYzK$WRXxCJvZxSM3jSBToqIaOIyHmjhaEV5ywR7gJ8y3IJO6yKXMo8$WZgJOG2G$KeJG1z" +
		"R4yQnmII4jKa4iQrNndgmZFuAx9yK6adBCZVaded19aIDIGHn8KZoCSd5qXr5i824dWh7MK" +
		"4cfTLYG6vJquuMKYwExa6832JaHZBM6IbBMzZpbdQDoL4bApyVL$pdyYB2DEzz4tZb2pfNt" +
		"5xnpU8v8aHxYAP8rydAdgHnLajB7ejnf$EWU2#wn9l9E4t8yK3sdyHoH8ZsYj2IHG#KkK3c" +
		"g9ANXUU0SmrFW7cCYxm8XnmFLSm7F4IdI8qfBactavSvNEQeafHUWtFdyw2u0Tu69lFE5d2" +
		"ll9dddynoH8ZsYj2HP8oztjifH9IbTZd9dywDR3cwvYRopXPmhVt7fdSrpH8hqYDAIP8tbG" +
		"MvG4Z7DXSvjZDuRYlDsOcO2a##QJdIkfpawuRsXxbEMV1DAy4PBzU7$3yHpdV7EuNncyZzD" +
		"MIlCXKzvemK1#MW#C$6KCylnhnmrBbEoOH8y#iYPoJ$tEKAEyFXF57YZnHC5rX7gYG9gmN5" +
		"SrZsEf#oUxd4c4dBiPYuRRIyuYqJfaFGYIYzIEUvnVcq72GB6Wzn5N584MMgHuF9OfQF4Iy" +
		"ggvGgDywbyDGmu9ATMG#f9oZjG4DBo7P9iXjEIouhLK72T5BXZbMo43f8bn$1tsdBo3apBR" +
		"vQLJb63#WWkyWuGXFG1ikSkGC$viW4NEWymqe5KacjKxJw0JLMb0orQrnJBl0c2a9x0ouit" +
		"zmQo6dUiaetG0PpFs#tNFS6lUqAW9QFk2Tv#Wf3UZmKUwyjgtB5ADa8JgAHUztv#tVi5MZB" +
		"gtiyRAmZfiLhTlgp67UkPQJzlRAJkiNxTOmCj6NMFzVONXFJ#Mjs#hCRrPICqbae6TU#1Sr" +
		"Nt$e4M5laWhqmGqcLQtRwinXshP2EqFvNKwoxpwouBj6JKNUQD5uJqUArkNrRZZbMo4IgZa" +
		"dhTu$swnmTQCkeUxuqJXFGuhMvVLkEELR8H6aybzRh7#NMF2xHar3qklAhuTVkosgeorhog" +
		"UEDiyJwyCORdBEJ$KDEg8Z$g#qbhfLwtSwEgErXLigzeg05rE$9zy#dF1V5Kj6xntuIAQwr" +
		"Kic7YTRllsKK8szhRopQqaFgOtPB7ZFwRaD5xEEqcxXtk7TQIzEUP$qseteKcohZyFVNYQc" +
		"QzjKYy#Jlu#BYohU3qFqdyA89xjVKPFmR4tkRjHVv9976dUoT$5aZPsbelTmzN2tJArkwTo" +
		"9Tr0vsnRai#bH6ipDPdqPLPxsUoqQJCkdq$q7OFsThzf#gU4lKnKztPVSpwpj7$jyhS5grk" +
		"tuuhpVfKtPLgor6Q7T#9QqigBtjRKWMPpsg6TrPwtRPy2s1CtJTNfcx8wF#cRMxB9jdH$Zo" +
		"h7SjvMz8$2CA8Gt2Ufve$qFqnu2hPCB7mH$ZOK#6sXEgLRKd$43Ek7LwJwt32Q7HCHEEQk9" +
		"fU#Lsyir$OddfRL8di$QD$OcmaCUWs2kmPfZ26wByULDv6iiwrQYxNUpxJaxcS#wRxfbrah" +
		"UHpkRKlR8IvF4N$JAZ#PzPQmUTozqtAQ#BhZVcVMT#URxblsKMG2wqHWLw#eoUzRmczQaUV" +
		"gLUtiYF#zKIxl#NKhwmdgjszshzdVXGNPRym4NRtg2dR7A7tg7qsxr5LdwFjPwb7RqQFVf7" +
		"aSUejTBbxIDoC87eqLrjOzoikF3ZM5hdhqsmRGsHRAgiypQEd2RtdhA4yvJsdZW6vRzj5wI" +
		"$edv99DkffuBLN#f8yJPHottRViOkSbboVy3IXpzac$C$BCjN4JvdrbRZlXEQ9u9cTTu9Mv" +
		"kB1xWVOStqWnzE$ewtaRvqaLB$hgE2bcQZalzk29zuEhgyu#YVf2K$DW#F7WNpYPmezyJF5" +
		"ViAROgtrffZ8nUwK7qNAlKeT0sBlUlpRgAj488#OmdDmt4ZnHaxGiD549BzH1FfaZ2EV8pz" +
		"g77aRiwq4l6JYNA3LPUsCSHbvebWRiojoMNMgUWwerLUhhrRVbgalbrsUBUz2#hiyMati5c" +
		"vN##JmBi$NriHj8Cl4xlBSZyNUZakw3VIroErAgVPgdS6UaTOPRxdxiL5RiRSy$ibIhWqbk" +
		"peF1$$9xYttbelwUEms33tnMcm$4QVDRIY2w0Ek3JQ8$Bz6vFdP16tQPxDeO#n$Kvj7wpS$" +
		"Yf19xl5SctSLzWvNgQUONVfNG74KvRt8FoYgakxn8XRoFELTIxdNyW2fQpC9V8xiMlSQ7lY" +
		"PEWOKoBdI9Y97fFod0ww9Zcebu#yebiNS8xp2MmRfArGmq3BI9oLmNCPph9NEIC4HNF3yRq" +
		"VuB44vaXTzLY2ubk8oJgDANm7$Gn1FHVqXaE17N3$ymqJUDHmbFugGIOHkgP88z4hSTBMbv" +
		"09UgAJMQfml3KfwruWvBxTMuwhWS$Frh5VAAVEg03DkvZrFLqYB6ToJ$$H7vGcBoWbuWXic" +
		"OFarxjgQKXbOZBDvP2toJj6wxW5sBxl7zzfJalq19RN$yEJdf6irSKB$$QWiO$xlHsyz#SD" +
		"wJlpCI8SIvr2PEbGTDLfFkaG#$GhJ#vfelOoZT2kN82bUwwrqVck8X1QHJ##ozZOGVItZAD" +
		"t99KZgQwkfToUTtnaYeULEEduhZaGRP1mX9SSbhARCS7TGo0GVl###JUexxnlI#Gskhtdg6" +
		"nFvSj$8lilu28vCVoMEHD$8E4ht23akWUCzT7vFY8GM#gy6xqjn9FfAnb6QBEIu12m#cSud" +
		"XqXe4VdYkzilYBwKSPGcSGcIudedqVca40aj8f##m$0#9$f2nb6wYqkG5DTx5vtV5IAX1Vc" +
		"fxXxzDirRH$IvZADq19SWAQxt23e$8aH2YyXVI#crHEja724XGLBhr8wGVxId3TQQxdVP9o" +
		"9VpaYfOyICb3eXF2DnlQaJasQaj1Vy5WSpkMSYmH4XvXvvm$0eWBw4kTsr6VyzZys9dvc8Q" +
		"qAS8eaK9skbYAD4aYaPkb6fRgv3gMuc8dd1JNc7aVKFKq4T0n98aAf0kbjq5F8Shu9hai50" +
		"NeLV7prZ3qqyPuxhU1KHRVpv#sRoc4BeXj2CpdGIJ#ituu6ny9FyIeS8cjObuARS9MmG0Zy" +
		"p4CakaM5ns0FTnM4FzCvILbUbh9yGdmnhd8NZ8FTau3lPHBmab#E1B7iMp$6EezHnb1hY7M" +
		"SYzsJikuI4#gWxYy58EIw24#M2VHVtN#ltj9SgH6g8sTVJ99TsPSer4XyBhWXgr4Gz8#tgP" +
		"zwnl9p7dtcZOAHZY7ECJ1rZ95xw6164Nk$OQCsA9yyMK3d#91e54mav4U8#WfTstNgSX2Qp" +
		"TTolIUvhaNA$LiU0ID$z8f$yfvvtltS$pzD9oM46smzrVaLb#J#tyjHNCgMHz4NYHfz3O#l" +
		"yqV2LtYht6ohxZKnz8rCQQN8Y7NaEJV7zFFw4x7egkrwcrikKHhBKUY4L#iWd3WG$XFLBAl" +
		"kbJ7qfKnfvj$boVFsyZP$pOq22B$AbrckfxBKoTQs9V3bvPGNh$WRh$ajQL#hHds1sHlgvN" +
		"x0lqnkrvyVeMOlqHdUi8CYGHLETm6d9hKjNI9yBwwQ6gQi$UHqu9doDg4YJaFfa$LG3kqBn" +
		"wMdkiUoiL0VAMSf#GUcbb48maPHZxjAmJhqMzffAU4#A8$PsJxfBlITDfEIy9tFwHelNQ5d" +
		"ZhRrT2pejQp$NCf6G4q4hAO$MQ9TY8rb2JarOxfdgA89xPce9FmQav5ocqdvzPuWZU2ASGM" +
		"SQKLyl5VcHiisyKRJMdI43piChdv8BLZVh94VyJgwZU1kFuhbylxx6RMejvYctgJe6nFztr" +
		"ZjJv4TmD25E4qY9q8JdwSJvGiwLEollJ4zORGUKRERk02aHTk1vEdct2paHlDlvEJy697Y8" +
		"jqTewc9$9u8w1YJn2edmc2oH#6JfoFyEyZ59LqFwqr6K8z#FxkxWNECRPAnyEagEIPLjyVq" +
		"llzuPmuyYc8ZNpxbMSsR#Q3CUQgvGHxS2PIkCT0hdkgV8r2ac8Ys2I$Tg#D5TXXBBJEGzox" +
		"dUinHEyPur4VNpipnupr3w6HvGuXaZFSsvtjCKdaKm46dXSazxzEmpFtfFeSHJ9WeaHAait" +
		"u9f7wifdpzGwWcaz#D74Kn4jGWk$Hw67xt7hT7UuoOA94Gf$QCzIpGo4vttk2wRaa$4fAPa" +
		"bauTOMwRv$yZOuh$Uk5UxzxKSVmO4F6Ez#vrBo4Fk2GrZwVSIzGn89G$WoGE5RBSPj8VbnD" +
		"dEVlGNGx9vIw$0xvS9q$CUSj5u9eyEREfM9OHQ$fPAhXdfIRoOq1IMaf4F#xPLEfi7lYPUt" +
		"PgBZy6H7MUBhYHifSJvt98YN0vpzE9yxqb8b#YFzqxdSfUGPmhO84h87a5KemV0uBi4kzaa" +
		"I$BBl74V7mPSIv3sSiWUHbIZ1y3Wkp9F4y4Adiopy7vTSIv3cMlW#HrI35#30Zd5rFUnJpm" +
		"CtKCYD7gBF9zQrofZYA0BgQZJyYzb3YNyi3Fr34WMPho8$jDtVANXfxHACxOcQhF32xXdYI" +
		"8fsG#tsU8tw1Sfis#TCM74YNCVqSVIUxBnE#cIL9$9WJwnWHfzoJlL7cYVf4bwZkU7UrpcF" +
		"PaoHpt9P8iOMU1ptyd$1A9e3xlL5v2wFHHColFVGdq71r1zZrSXykV5oaHwA6XXDSdC9C#f" +
		"53YEIf7H7BFiUFSPtozT6Mgpac2wn1fcUBQt6T0T$6ZjOIap#Rd7iTtTQ37jyWpd8CQxw8o" +
		"TmaY3exko$3AarGfxqHnxfqa90I7fxqJbJRtPT2BT7pP5V$$XdFFxssHvvqeSjoNUOmQNwG" +
		"oE5hBt1U9WwFht$ELUNVhPuRqo#xTe1VeUBUGvkU1HAJjGk95b7Y1oX5H7exkyxwSo7jUdM" +
		"c$Ltn1r#O#3tgMZY2#T#3dciJpOhSVd75jAF4ibIEYFBucF#tBYRodzJD3#ddtQIx3ZoB5q" +
		"wcTD8cd6OkUATtPrrFjkSx3CoMuDarYQbOTix9A79rLOdvMYGLX2QU1ce6SnbAMxY54ypFb" +
		"efyC2UsQoFQSElw9oXyZywDoOoAQnc3FsSgW2JCGyiyIcYI6LYooWuoSnsgI4cDotKNnkfo" +
		"nqJobgJA#unoKLM99LecAh1BdPfMuBgl43LabRiqgyN9MYO#pIgp9Ah4XSkVl3SxdHn6yDv" +
		"mV#36W7FtTkBAhtM7CkX$rxmn$ZqYDeVKwh6kia2BlrRWudqe#DyRexxgE8DTqpqhdZWbne" +
		"ssAeisK2l2Ox16Fmwp3U8SjYxK4oihMb9krAbTJThJNnhNKtKyGLXBrAxtAzwsnfQxs$2ZL" +
		"4F4rZPzxlsXIf7CCQVdplXPRatkY860$COklNLj9kmJxRoPgeC$O86$JV8rqZY6zKG$uQtm" +
		"jfzuprBG9lfQbfZ$b0PMOAJRHrshal9QRlrnhH5lhQz4sY8#cGxiB6fNIvchjVRPA2bpdHh" +
		"aEoveoVs#gzG1zd9lLxqsTcy9ukAveUUjWPlWeB5oNp84kb4$yEAioSaBbitqSVhrhCPivB" +
		"CNgiBgi7glF6h26R2ksDTk6RSksOurOOxOzsu4rWOsQiUQi1TkHjOIrMhCsh2rwfpthmF9O" +
		"FYjWXQo8TMITs4wiC#l2khATMJVMdVLWFLanwyLwirrO7zQNzMFzsG2sAojXkx61h9GDOeF" +
		"P4BOxUdaFjYSRneQp4MmasukDOgDXmNtG2$kYr$TZuzXuLiRsPnFO0Un0TX0xc1r2zxOFa$" +
		"WdR#4jAK9BEZ7#NS#MqnAEh2o4ZEC#0Yrf0jpJ$iAMy5gYBNa5jPXQCXSzOEgJYP4#sL9we" +
		"GvmbW5TAeBki2sc1GjGHncRpUQWR#Qn#OJw67Ri5jM2qqCj#9HzjeMrWAFSibjG7cd12K2v" +
		"PRKWFzA2cJM#1UMH5fm0xE4MM3My1Iza6GSrVovgcgK5XQYZjWMrBKXkmKV65gJOpUmMjXe" +
		"eRwUSxsjm2w9zC0duozWKGci3RGexl3b0MtDRC2TZHNi1BSX3IoQXfYcONHUp4zdqQcx1x8" +
		"GMf6AyoA9KVRQ6dGEyXrOh$h84$ECY#FF8YxZjWxgdLJF#90ygY#2VoCvWPTMAziK4jAT7q" +
		"3BKKWQSXS1PHZZB8pZ526Z2PbHhc#o4DkqOqoQEipoXJIVLu3QjDexgwaHxUgNsfBsg6QrL" +
		"ARJBQp3QgJNE4tfL0kt7x9CQZ3Q$ng5D6cKrRqxuDW7jjJKEROC4j0qZQFaUVCj1MxDjQzK" +
		"uj8qhuRUNiSkh6MtJIbo$LBzjasQml2qARQyQX$R2Ibs7DAZ1SqA36cVR9BIPEyPQssukj5" +
		"pxbeEsyHRb2RLeQz5kYND2zQETMuchI7wikVlRbZNEjlSdeBq$WlOjzdODlbVpJGJjp#oNQ" +
		"aRxzmIqZMlSodirIbHkDnvytrVE5j3tVSUnXUnujiY$ntjoDT$blJQX1vweSMCnQLPUNkF6" +
		"OgSjwgx3Wagi8TMFTikwWvxa2HCZQF$9Vgt1TnsYQ7zd$wvcj1CJqDerpc#VgDIU$TLgHlj" +
		"HfT1#NeDt4vbeowePxQ1Ax2RAjf3Tn6pK5TUcPble3ickL9lAjuWsyPhZsdJ4$uCssTM#3h" +
		"nSYLMhUaTqgX9pQdLRDHzokNuhEPbLrE0zRBqQv0D9EACZgpfnLcmXEE#en5sFcdgrNL63S" +
		"7AzSJZlsEmuBNQjn7bT1ET4u2m7JbvZ2Mhapsa6gsM0W#ECVmhmPBQ4S5GGZitnf2z$Xa2q" +
		"O5ga1NFGWiPeGJaaIo39My1hrx7n$pNXBN0WKmSoIOWQ0D5XE5x1haJj3L3xNFOXknwhOIv" +
		"zNmWS7O6e48Ww8hz4uZ3rFMzJT7rYpACdBzi3vwrPSJQWbZukxSpJV2tC1US7uDd0cGBEke" +
		"IJQpt7Y7CDzL0KPmNXh43DPoJYd0sS$9UAbdoUdIFz2j8tv8Jp77Xe2ZXTuCn7gHABUrL5h" +
		"3rVINWwDzcU33Xd#qZhIQGfjZmdd6NGSnLmMi2PXr8ba5#9SYQSHP3lb86pd70#YLgVIiHv" +
		"Ed2UoSxoaNQII1laX9C$bSLntWwSJTbwmfc6l0bd8UdFnDcfKZZloq2Q2yw1L4BuPnw8uoo" +
		"CsUSjXtpqQfIn7zbFm6cZnbGYpdBWvEES#pX76imRkU0i1iwE4cS3micVl6yMwv#PE5EGTw" +
		"0ZctyEoXZl0y7Bpx7VFy2OgG3E2k0y0rI2q2EctsSR#$q6a8DG1pgIS9wZZNV7x$Vo7FjzH" +
		"pcEAgZVpwL#lm1wSXz7ro9V#6U3H9pzWRExjkO4gLnmpeQUkRBVo#cDX0re$9fnDZFWF1Us" +
		"ST2sR3ZB8pYLVmxA2MSlZ8uYuEoahP1yhehppza6d0ro7aVdi2Df70q6CeMpVuxZw4CVvyM" +
		"uUXVhaNcURu0sNMoObnhdX5FDInpdR21ubBqEwUwGpWtdHFOkSDO7peQGAc7dinyIrgFCzL" +
		"tW$3hhU5SuPsEyM$xgsJtdSSJVoj0NWQ$lvmDdFHgt9fmNeuxCVY#dSTJ9$mL8DfmCgKUHg" +
		"i2wjn8bh9nmlajxixwGwK$xr19QULSPSNPX3nbnfcYUoHLd0wHcKwe8E3i1OsxZlJkEQbyt" +
		"c$hTGfxPFqtsd8qI3fi7dESaudoDzY7NGFf8wkyRQIVH4UXomTcV$GCrYtr8Yd1QABqWPbu" +
		"gCinB5$lhKJBEQu7pRk0iOy#HVzu8JIdusdKvsdCqGb#KvjSU7ETxx9qOUqw3nDqPE1UGFS" +
		"$FYlDYuBI0yrz0znBXV0#fYtDSD$dTufIqvwE4ypkCHFE#ZlVxj0oSNGZdwrbnMi1P0PopQ" +
		"IVF#tqbpkiYv8AJho5ChfjZv7ZV6okKsPxxnCvBwt8UHtiZjG#bkfEDPkI4SovaA#GyNu5v" +
		"dAz7ov4suQoWEIiJvnV0UL$EEBz4ogBKSc2ho74$FngI2#ILPMCvZjOYc72knHLyvhsm2be" +
		"tAxBsUmFPxnRT6Qo7Vkz2b5k$$uRTaWMS2#ZwYEEy6EVcyPuFkjemZYmvVoRZp0VE1S39TV" +
		"0QRgIzvzqvplFlGxO1wslPmCdJ9LJI$At5LQG$iz$pApNFyxURhA9KOwan5vpvyAohvNZdR" +
		"tWfaQqrs$FYZ6Sa67ttuA3EEWYvu6nCTbYEaT69KdPEEDzX3mDHN#3gJ$DH2SxvrR$vEgxC" +
		"C8u2$$nF8iv2yi#vgACnQydkHorFqFNImpdXvDzYl0IS#S1vEZIK4Ce7Z3WjiaKKvmFadzo" +
		"UToJYV83c#LVfVIJvLEzhY4#dEm3PSJQ2N2EvN#Bf4Xpvst7CxsBYdoXE$d4G#BjzizrdO6" +
		"H$Xbu$dRNqv2SNd5AoBq9$IfN870DEoOdWf3m7eGv20avmctd6JotEMforE6jnrkAinLcBi" +
		"nPdBSvQdBKuQt7Mugp5MOkp5cSjply$E3FlrrKE9xDyT7MPZMCgj#zXpJZDz#UDzkJVfvRB" +
		"voYE89HJGq#C4KgKQefWV3wDQXFFk1q17Hpb97fdP3TgnNI5KZu9s5X$4X2vcNSL7q6hHw7" +
		"y4U1sOrEfl$Xp58MHDxppMWTAvBquScc71joMg2ShSjGpaHqAN8UpVCW0EU6SY5fxa9uKzF" +
		"Q0vQF8RQHJ9ljovDBA$7k28u2H8v$svzvDpx6ZREnJWU0htqW1OnUMHpKN4lfY1FvKO6Egg" +
		"xzl9$vKu2Jj5mBJEMe4yKPhBZj7ofQpKzXILePMdCfEaruXVFQm19jEvj#3I1nrXKtHjfjW" +
		"qolObPJVYzs986pQrxSfx6Jo1YenYbiIyLGsZSQ7a4smARZrgLxDfZZFoPF9QuyG$g3EUQt" +
		"4RK3jxmCC$N06xCZT3MVnzXZ5lr#Lzk1Q3TZ99drmLFR8Oxj9B#h8Ph6Zw5yqTOyfpcmTl9" +
		"OZAqri7UOaZW57CPlKXrqrBRBEFl3TVgYH8t7GEZb$PTHeKSyq0Qwwt48uQxaPUqRCfqLq9" +
		"EnXBPN3Bhsg2ThVZ4sIPVb8dLxrsFapNuIYY9qXiUlpwmgWg93OBmrZP#VHt50GiJjV0OJT" +
		"cmcxcxsggaO4jpstkp#QJRxG1pBzW4cD2EES9kV5KM9Ttjnsbzg1tH$DawiAkxzMPxMxKPk" +
		"OOnAU#QQLf22oQq6$orHFEjBJzJHhw3vJQcmZdzsh39VVSzoVfuTnmPy3N9SIhd8#cx5IAL" +
		"CMylxDWelgcMws5tONrMQl95nLsOzI#nQBww$s#qt7HICXYcj5W0iZeHRN5e1hq$rhazOgT" +
		"IqcrjdwR12Escn9UmIiLOZ$v5h5hg$iEWi#trUc4lOtecrYVpQ9rjafLRFEQhjlZhr#vlKV" +
		"pR$I6pBgcvZh3a76LRgxaJed4V8f9gl7OwUMLyBgoTZ9amFiWKqP#HZrlIWBxE6ofjrDDd$" +
		"9sUhSkok3NBCfHpwbqiYp#3hfpWtx875VntGT8gyjCkQFc3R2QzGT0tsSLixgbK3#vtnzSi" +
		"myEugUD2DadhmknxW88y$X$X5fEqD7HgbkR0N5TFy8AmBTCK0ALzFyBXSRo3fwflj7$Cx7A" +
		"1qNQU7ZjHInylxiTuSer#yLTNSeZz$NaddQVIsPKmAq0oaLToV3W2iqq#M8YzyNs$ouQgAz" +
		"8gCb9$$IxdVnCSlVY357uA9hS$t#9DPRvLznkDZAU5p#NQxizWhTmQCoNQIEv$GxU3Allpz" +
		"s1v8VPuvTx4M8toHeBPqRaBB344vXIt7yhtQlySZA8aNAWDJdyNkD8Imodv26PWv#fv7ZEf" +
		"MT5kxPn7kD1bpi9XqNkxCMr$y2hbpzYuzi8owBtWmaryzDmUMN3k5YVsFtokzV#bJUNknDO" +
		"I#vybSXhi1UxC7gwSTikBBv5tk#5jUMq8zcN77ZaNZ6bRpAnsEUn2NBwFYe7uiDEvytoMwb" +
		"mcwRmrxo#e7ZCjqj#CljXVYFcechfjgh5bSjhbfSjRYISD7QmzyffTQUy3kbbd0vAfEvRfU" +
		"oy$mhoeisXxquBfyNmUNd6#orkN5vVsf$lxdzAzXFc775zcEDsQ$MujBkf9G7k2YE#7w0o$" +
		"E2QqR37HU9YpM9mNKpkuLmtKxb#PqdWpTxwcvnV$#Ugxv73Rs$rPDtnBpWkmFJtU9iTvxWp" +
		"PxdMq7TgSkO0NAzYqsouevOC$yUzP$0fNb6kORBy2rOPUt5DkYuChu5o$uK3CTJ6DWhmsFK" +
		"4pmPtyv5RSMU9Kd$thdVauPxvruLtjNtmjy29LeixFkRX4pfaTze8fHHVd0$bf05DlEqZxn" +
		"3#QoQ3QeIcVApuFk6w1YGDfj4tZ$bhx0PUuGGrGlrfeweIVAuZ7bIJ1kNyFpDFox$z7nH#N" +
		"5Pit696JR0bJ5hLDFyMekhKlE#DXuZVhN9ux4MLoskMbork6fnrUBQKd7vgxVXkaZ7vNcLl" +
		"xwjnLMBgnRNbe$BqvzmaqzDPdvgDgvSxmJKugh5LOjhq#upKUsXEtDR3gw$TlwgnLMBgnPN" +
		"BQvQNBMuQd7Lugh5zR#7A#CtTTdl0z0JCLHtHnCkyUIPyTV4fR6$QwqMNAZDYCiliHdxCVG" +
		"$okMP$IYb#3DB$3$5#BFYfuFEP6T6SR4BDnKNQooV1tY8$lidz2oLl1xAy$kney95iNfweZ" +
		"ZJNW8NR5i5zifymik4YwpL9LIUFvrrjj6$3BZOTOd#TKyO5$tEhORYoaGMxrzwFvhyVjFzA" +
		"ti$Xd4fL14THdkPS5NENZ9L8#rLKt7Ln7uChNonpu3fbigOnJRBV5#Bw$yZhh3$ixC3NF3$" +
		"Ai8bdZ3Ki6GyOHZ6nTwGzZeFyHkauQAgifTw4vrchuJlaVLvWgF1iS3pd$gdy#1xv9x$YxY" +
		"yIdtlNejBQWizlneQ2t$kEONGctoJtkpY9RnhLzMVspk1AQUBU3EKUDUkv#dlsfKfyQxTqg" +
		"gfd$TBTTJF3gsjlphhbxfgww#jlxR#slfhww#jlxR#slfhw$zBwbU$FiR#lsvI$QnfKBzVf" +
		"eIkb4hf5yiI0Kc8NontI$x5CXiOgKt#Iu37lniHz#hfVdJiB$NvVrUKiCCz#Mxjy3lfsBaU" +
		"VvFD1LfBB$cplwJMxbuKXsmNniNlNYZBCBACU1l3gDnwHDmJZ$C8#ZUH18$WR#lZ$rRCQmM" +
		"Moll1H7uTm0wll1zkIgtcjlx$h1NQJFtAt$NQH7fIQSn$fHH4F2dwHkVQ6l#dQpJvQ#Ij9Q" +
		"MHy$gvlf#Jj7NCy67zBI$Tj7n#FZ1S6yrCV8MGx#SakLp#LKdLhcQcq3ijL6qo5SpG0wDF5" +
		"12VqRlEXFMN9Rw$#aBMB3eJ4wUUmVgDgR#R95kVUfN$VqYde5VbIaIhQjRsgpMb2$LSURZz" +
		"QZKKjlJuIXHvBmpt6tOkjV#2mFPO3PjYXJRt$66Yxa2NgDjiUpepraqhT1vwpkzvxLshVq7" +
		"Tv3MrTV#FrItpQklUqklE$7xUKBV$lMceRdPsKjt9QmgxJSg7snAgMywHgYq3Ozh2vrJ$lm" +
		"bb#Muo56Dc5rSnj7SKRssNgyT0yrlRIOxUXa$lSbDzKngyirVAgBPdMy4p$uEnIyQUWwyXJ" +
		"J1By$#R87I6VYwGBL5lsEReb6rAu$fPOWrMvYuPp$f5V8mjowpRv#cxXspjtcnrvx1hEaoj" +
		"sva#vkVg$fs3ZrLdMvAUrSneop8P6#l6pghIOxNcsL7yKWnZg1B#w8K#vhQ49BArXLzBZ0h" +
		"z$qVcjGIDQozq5IhUw8zuPgHDMbjmrdrJs#JRY6Cegrp$L9MDI6OKtKrIlfRqr75$DVj17t" +
		"#UO1cRoUTnyQyS$Z#uZjB$PzRN6$C$ipvIDQk6reX0B#teTRtg$bRc6X6vluKuT7#h6ZmnZ" +
		"woIPOxGwu9bw#gU6AuBSqHJw4jwkg8mh6zJFIHNMx3#kTcYgcrBaihJv7eUZ7il#fwxm8Df" +
		"t4SzJNgmsDqaU9eiDPhqdKlwBWZquTgnEEvkDANC$sLI3dsw1qVVRXNQSoLviBxdObTdjF9" +
		"cTWkrydOTbN7FfPue6sL#WwhVdgHLIlVWs75W#3#rcBiGwZuHQnR$dqdc#qIiE$JtLFw1FL" +
		"jkTvqpxnRaUw6FxwVTixw5Rb2MMLRl$JBqoB8CIwkw4kS0N$eldWDgzTNggzLNC$NbjCiBV" +
		"dibTtbqrWqO6dYXNPwlhKJCc75hcj3cYMTGwHwllXR9dNHVVvqfyT#aR5uXOz#aJ5pif36h" +
		"EqeRpQBX$nvkh3$n2csxnQvQ$lre7rltp3x8LPjMGcahgqfj9l$uNz1ck3yJNQ$hUUe$tPl" +
		"vJydxQxYipVYFhk9R1zPJ$zP1r8Wy1xuPyosKv#Mm0ybF#gRAt#aNPDotAfMn6jNrugvlIN" +
		"UINGgK3UG#LxHk8FQOFNMxQD#EZ3AZz3AkfJZAQhcMabVryQqcBVLYh#gRP7g3tcfO8zpgy" +
		"DnHcll#csRGJkRhMQabuwh0kF#MMkGCdeCMqpmSZqMcSjCIwJ$r53#bmtU34#PeQUVmtM3X" +
		"cxt8wqB$$HXl6ShFvIvF3cDL#GPajEj7pFS96abwKDLh53Bn6Zql5urQ$OFu6bjLrp24T52" +
		"onOEwHTzv6P$GVSigjdZbDMQpU4tmYfggCUHdSaT8US4zv7pZFV6EqAX#XRfCtZCv8pmZ4S" +
		"OLYJEI$rGVyRDwOymzSjqR#IpM9V5k1hTXIIuZ0EYQ#VORc0CwhhbxhcEBtyiG$UDviJDRc" +
		"KHIZyjdZ48rCt9yPTcUjv6s4pDrFSZtZ6ZZ$rCjToM1nsGW4dkk9bYFU8kx#2kl$tI8U8R4" +
		"rrf2MajHNyvpJiR$HqoCt6cYTSk$wyvdnsKHQqokpDD7QiV8#o7MZjsnxmh$IatTsmjm5aH" +
		"myZsgl##YMfO1toK9jMIiTPLvWahhoz1k6VRdI1AVdQs#clMUZ$l8lN3m3B1u1krFxHQafc" +
		"1zwnBdv$x8AT7R0K#9qKer3mh$Nxh7dqDh46w7oJhPjL8gyXnQLAjyGhQIMZMTybltFuDLp" +
		"cPIQwpb2q8UbA4rTYuU57ytLs3Lt#GYSzLEoBz2yiGxGF8oTi9d8vnBEra#KjLJVvTueUlN" +
		"dDQ0Z1wIpqOK2Ej2n#7i6TdsgNorgDpOq7iee$Shjzxdy8sMn5b1yrPtQ3sZCcFOntD3mfp" +
		"IFJAdPDulU3h6UxjdUA#gBqzzDs3qm8t6PyCPtH$JoWARiLuDgtnw5FE3U1kFNFbe3feCNS" +
		"MnwtgfPxZALMsW#IkX3N7pCFzkXEgDBQl6gFHLauHu0fJsFboN5xitqUqHcV7ujxsJDNk4V" +
		"xbEOvBAwXx8PS#JEYS7lrndtUG$H8N#tqsEM6whWLdMjSacpzJi7HfFeT6Uk0TFNYarorHI" +
		"OmxZjbeqXlocUqRl9SqVtVdy8NlhZ5pdkn2c6tB5fDKQh0PFPw8BI$lFz9nXABt2t3RrVso" +
		"YDE4xmp3NhE0ZIRI4NHe$akWUQ1FseZ#YkwjQv7uyVaGRxn9IIkxlvOZEc5Sjbcr#2zc8qN" +
		"pdG9CgR#LovyulctLE2vSDpMcRjMpyN9fiUQrT2NlDg7xFjC8LR9hc#FkoqApV3MrgUeP9#" +
		"0XTCMVUO#ec$CVZJ$W4#yqvWeSh8l$U44bYdgUqsFTezuqW6qZodPLwVuXwofEux0fsfNRF" +
		"tv#PCHORqDwf7985x2xFasEVholY2evpUmQx8koi#A$l6lY$B2k5ZYvqXLikqHSZnUiZpFH" +
		"i5DV6IvL6VdrobxP$5y#8gk$B#WlCb2vLAQGF2zUEdBjuxJJAxmhq#5hxKpyUPghT4xyhAL" +
		"2bu0kDXPVAPwd4hsPAlU3DAncrKoiQQ$j4qGhbwVt9qnDgZskxpodLqZ6rQnA6tnTMldPjX" +
		"aweNRpnBrgxU0lKfjIUr7OlyjjAiTjFQhlGatqzrTgypB2c7PPD8hkEpIzXc6F4DzJHAxBi" +
		"tpL5InYlZODykZOs$vOhF2iEn6mrBbCJpJ7ZQ3uAvh9nNiOLMUWQEbQJdDa6vhgBudKPdYL" +
		"Iy#Sc#awjH1LxUUOQloooRyl9tsDokoToe$wTuUzXAVWWpmsF0RbUatzhNFXWNNKNmoyVUB" +
		"E#rmXo3UDIvqPs1b6xHD1cIWLuZ7U6Od74w33VOKkqbfnRAbjJJjQgN4tPqSQtD4jDbKQRQ" +
		"qr97f2RZkJUoytNAbrJhQzbHLlhQrLKKwslPKLRyttDqpww3cqNaIGLlCDMypLsjjndgkUZ" +
		"Cdzl6jsThlBaxqtLRqHrNHblkNxCCtpytwkkydEWAxYgCdyoTONBP$kmnnXBdNaouv#Uot0" +
		"ubB7YveXVGBo0iLxdCpRWDyQiTOpPxHaxESrOtpqOEw8VyZeYRmHZKvemyPd2s9AjmPkBS2" +
		"lqTcVCkHvvnKW$ZtWmyhz0F8wnEfqG7yFOvDQC7RGKwJEGXx3aGkIDPspIACPw345y6i8mX" +
		"ASOEnXo1pyDdGxA83u4STqnqFqAqhkZ$Cv8GvwzXFGvu7tCM3rWJvqBh6SZlIlYVp3MUZRI" +
		"#SZ$1kat69k9dMNzInXhymjZ3Mp65joC0BjC1fOsu1s2UWz1VNNGreDHvqI49RU1XpRKGJi" +
		"dekw9a9a8cVQJeACKPeJCeSZVOJfZUVKPQmXi3IiGhaFP5nbh3anJkW5Z2mJOhnxil6GjOt" +
		"DdeFoEg0Tb3uNEAR1btRkGXkx3hu7SKOmT1jrJlcUiBNIsVPUnTc$2LbynTjmjqB4HwNqHk" +
		"#ZFdHXRt9QngLtGlaAKWywsxo4FwNReIrnPiuRWRtKlagYh3VAtUfAnhHiorg8POlZ1reSZ" +
		"78jmDsEde4mBkCeKu9aAdEqwennmRGCyRM7lmn5FRyFOma4u$nswOEC5mBVm4CQEsGRwkq8" +
		"667hU0rszKEuWwBa9#Vz4FkhVwdZ8eKozoy6x5dqENtFUPcn#7cFReWsfteYFH5Y807$Oza" +
		"F6jeEjjeCVRZS7uKG4#DbsdpBM2Ergj0i2VBZHSWJuI2FuNcFeRzmJ0NKrFXquuMUDdmKU#" +
		"DhsQD$si45Vz54nR5j$JzWI$FvePzyUo3iBVEYUZhwRYtu$uH6KWwyUTpJw6Uqv1NrzrFuu" +
		"XmyU1VlqlnXZ1sEWtGwCBKBVjdyGCVfb8Unv0d1CHPyjl0W1zc#2CRKGxLduByQERue0Npq" +
		"1jgg7iSEk0dynpby5dZFXioZNv6y8wr4dTBM7ZpGTYnZZgJ$QU3pw$mJuzWdeksFwC7Ri1q" +
		"YVXFO0TuUjaBuIEe2jFThTz1IS$mVz2rzkZN7M3lLi3Tas60zjbu1$8Fe2jcYp7TBejwQGR" +
		"GTR5N$BMBF9c1$GRlxp90Vfjh1hF$HrNTGn$otK1NiUZt7NeJ$Y1z3lwEjjC0RQ0ySfQCTn" +
		"Jo1yX$Jju6E#MOp#FGLvzNx6#43$ROFnM$zWf35U2b5dYrFH7hHfH$JrCHYREwBTnt#6y1F" +
		"6DNnrT$Zb8eorHIt1Wvuz#Fm0sNACoPOf1CmrBM7NUXXtRU13BL5VdwyX3zmjkKmZo4FdGj" +
		"Y$EzhN7lFLVFJjVDZgAFHfNzYcvQCunnYP3tvR#CKkBwDzAy03rZx0q07zsUS8n9Y3Eg1$Z" +
		"aIV78LnEmp#TXJ6tb3qvsJuunxmWrCWimt6nocOMrlToTYUZH56GYzynuBVjCKSj2FiqBeL" +
		"OlXn$UTW#tSmFs2CxGaxj$elqkK8m30JRJWAEjiD00$pG3leEX9#StGHqfYNZzwRiJBuSBk" +
		"7W0i#inZjFnhO5iEEHqDkyMh4qByOusqnVF34xN6EkV94#C$X3oE6JqsgYnWu#cDyjq6$jF" +
		"c3iTcO9$fFG3mG$Oj#El4ys1jpw8dtCROhCEmAdBi2pm3OhGrqxFehOoMmQmdyOblCzoLy3" +
		"FS59fotdSZORXX$RM7ltT0FRJ4kMWFBxAcC3SISVIJQljrCj07zkXjiCx01setvRZfyy4ZO" +
		"eXtlC$ZsG8p9WPW$1cAEd0x$xe6#iVT1m1nM2b#iXxQNOgqhnRmv2BOS17iFkXzbuUE3BOJ" +
		"H29SYO9mDWLrJwDCKrf4w6DjrOAUwc7FgeZyTjAy3vhyEyAkUcCFQGlTip8E3xq1xuNVZDg" +
		"0yV6O8x7AA1pdC9Rl3jtQ73plpK1$csVPeyvwmINlCZpCF05xCx#t1Rmyyqx76T40R#yDVE" +
		"W1hXpN8GnixmAR3OCCEMBk6yV65SJaCTip3k9jL00mOQtbrqDyd88REuR1f7kmr2$NFnloL" +
		"1tpvQ6S#x3GSTiv7$mm7Fn$pxGZKLu1#6W5UmOs8OSU2VoE6BGjXbv5eOo7oHi9#XS0z4hY" +
		"Ai2xk1JiMmVPxmPP568zx0Nz7p6cZK4z7s78KodQ4Zb58TmBsKR1j9zXrDEpR2MqQ3Jljj1" +
		"jYs6edh8LxmquxGMPlsA8pwjmH#MrWzppuGqEi1mtHXmtH$gqmzs#5URy7olV0VBKLnjFMM" +
		"6Vo8RirrfIbyCzsyn5tWE#0rmYyfHZtZS1hz17cCVXoEupzni2KZtbkQ#Hj0qpvyAbyuCb7" +
		"k$fY3cYF$i$76bGCFoj7dJqmZjfWNks7zJiFMCkn3oa7fZtWPtbODnPXFbo4lKCvrf9oZC#" +
		"zOVFPy976c5VpiOQM8xq0kbjYZco3FjyTDiu7fcsm9cs3EMrRZBkzUHxs4ll0ZftHp$l0Bf" +
		"qnL#m3FyX7tXYix$degovOvpfW7EHVXZoCpyPN8$uxpZ4tx0k$oaTU5uor7gWh7$DYFkRzV" +
		"U4N2#0h#wAFvs1#wGAT#wBVkgBjOz7khkZVVDX#BCfrXM$DmVhI1Zgt1OxMs1$rX0toOSzj" +
		"luHTCQVsnDoxtGMGWmtoOPljqAUDk6tX8zl37XtWM$cFunnoxL3NM9ITZdhdO6vi2$iDHNl" +
		"oi2$C1xyHndyZp3sxmsP7mdyEnFgP3z$P6VspC$huG8oB0#479PXtss0zMOpvzWZiMmim$n" +
		"u1#$R2lDeR$TuIyznGs6m7ZXNoZL57uokW4thcO9ym1tKqnfvl1$JHzfXtyx36vC6Nyj6cx" +
		"U7ZssCFamSVBO2TzeF$p8AVx8U#sW$j6uVnDGwstm7zlGFEcs3jQ38DifXlns4SpCBwDXVj" +
		"Qe8s5y1$My87MhL36hPg1N#SMuAr5FnMm34J#vsvm3y3MDh0rdFHXbdl8uRFjmUcjbYlvg9" +
		"$bvO13$oj2VROlO6bDzQC0tcx8TCRw$8kiFCyp4NZuJj7O5mknLWiGBicOvvf2zzg3$cJC9" +
		"SMOFxO1Nsr2#Q2Nh190PSRpjWqx4aAC0vEmjpK2$lsQUZ$Wg4unrpN1xwu0EDW6doh06LEm" +
		"bweB#R30jHv4kRLlfZl5yC6UV2J9bWlZi6ST0pic8Tvi2dcoMCmVWv$1diHsB7uDPG3ZcCn" +
		"nex5$BS7zYp3qASMR3SC$RJqE6mei1ODn$ud3#j90TRz0kojbgBEuTWxj81z2p3F5a1kATQ" +
		"kuPZVEw2V2#1xI#4p8z3V8s3Z4V3rfLYhHs9Ux8ww2rOXmBUMVeuyOD#n7ixXomMm$r8#bw" +
		"7D3O2x0EKAhk4FQ27l1yJmgmBizGxYU51$C$Z0iHWVVR3#zy4QkkTAs1nj7GUVtnEwvy5cy" +
		"z2#FEnf2Z3Mci4s1UYFANj13cEr07kZ7XXt5KWt1xR9y8qf66VjODTvmDSSVLk0$fy2trW8" +
		"krHWtcw9FfyAdviA35Cn1l8v9jHLWBPF1Twf65yBW6aQ$6iQxD0JDkyn2xeXFmVZAW$xd9O" +
		"S1zfJW7ch0ksVYxW0yraFh1FZeNCU#hqGQ$nux3Fdeo$oiR4hXByLmdygiEukm7f$3DRJXP" +
		"YNAx0cBO9Fbc6UFG5ZeCVh26XBA#o$2h7FA4Jz5V2L4s2hXZmFFbc8#QS2FdW2#h4GDfg1V" +
		"beC7wp0l5A8kQ8C#nGCFrQ6FZWMTfY6$VAnsESVozSUh4TbQEDnmDCVk0jXtqBu$ZJqst5e" +
		"OrEqjJtchlsn5it2t9A7zQ0G#UrntWPZiIdMwJceVmxVZs5FDHJrxe7vV0$uq1xee$qnplV" +
		"7t3e0OxqGrnY5cBzde5qxGrSXTFV0#2X4$qp0tD4DysulZDD#q3CQjcsFiTSRQsm$pFU5V5" +
		"r4EqR3V$8nBdkW$$fWJYj4$pR7V3m1VTCDs2QWpaBOkndsgism1Xy0Uyq3XcRmcNdOOpJ7N" +
		"D41s9e3xm4OhztWFmTWdIx47DySrn87eDtTKUU16A#5yFqM6ES7Ocxk3lq70jiy#4KBzFT1" +
		"aEcE$ip7l508crPW3rM8QvT2p7czuVTzqOV3CDOAiJ$hXpxiZJrh6ynzks1i5e9V22pEi$o" +
		"H3#JXkg0G#yFXs1iMGizmZDr2x3L6Om$V0VlBtcZ7BCovmw6$1I$FrptuqCbOKmi$0H$xjk" +
		"uO9yCn5$I4BKRm#HO#NeXzqWnW7u4ntHPzEmBo9oEl46re1zyS2L#S0LqZ#Pu9RSz3VnQYp" +
		"fweUoJcrvxOknm4BFcOnmgXkn3NFlLG$toiimlWEtl1Vtj3fZxcgV7eotputqpumtpqzJ3C" +
		"hJtX8qFv$GwiU#NWvMElMGHVBeHjJiQrI3dis0i#NOvrQm76Hn7Mr4BetHiJH3xcwZoqgp$" +
		"yiWZxnsFHzYBCWyV1BmgndkwDFSfyzDlnQ4CBd8#73#w3lbY4zlJ3V5#4TQe8OwW8SqaHri" +
		"CY#5SH#hu8zLcmMH7sEZlYEharziBziCuCHD#MeazBOUjIjAaGVjmMUll1paKOGqNmXq7Om" +
		"nN17$fXNXg4SLE4UMSG#hG8Ux11m5q4lnwCDQa8DXiCVoqw33wASLQ4#Ru8Qsanvl2#m6bX" +
		"7Yg6pNfjYtpCGRrcYVj4hV#GyMmHisjvBD9MVH7lUP3A4#Tsw$3v3dtrSv7NVAACNn1nYs8" +
		"PNn78jEubuhP$2$Bg7YZYUX$BkdwI#UYBEfBdy7rxML2ctWFH#dC9yA4XcNbz5iWwRXDn6y" +
		"mBzMMzUzuaoxqTBcEz6Zvl0D#pkuNp1XyIFczugjJvYwm7#us6aqMwnyE1t0aV1ka1EslOV" +
		"vLwCAPslrMaXvN8FAn9Ynk7wzlzTuaDVTzXzmZUoxNqps7UiDD5l3N6rk9UGNvThBTRPzWT" +
		"UUkZUPaoY$i5wMq6ccMsEIERdZyRi4#S8TlsZZn$MyRhHDpwHH6tVoWeiptMw#sbRtI$AyW" +
		"Vtbx4ioP9EUn3Ty3UhivqSRvLPn7liAVK$L5sV6smxzdXZU2ytRuYRdAQY0VVabbczuxXyp" +
		"qMQFgahxJ5$hl9fs6vreS6wQrt2z9D5yRZQ$gZblwthECt4TUHxMtMLURF5VUCcc4lCnppT" +
		"RChHFxmrSasQ7wNY5jqaV55cJ8ji3Qq6HoSxtY9REV8JDdsAxNqXWZlVX5tW4$l#5EOTppM" +
		"YPOVXlFQ31Jnp9lGDyr4kbtpWDygXJ5yXqZl#fo8AvQ8kFXG4Oz8YNZwfA3Sz6j4N88rUOW" +
		"Tv7SO8E8PMAzQdQlLWxtvWCybJyu1hN2TKoBdtY5Onrkf#LtY67APZByMyT3lmstR$riP$o" +
		"3Y2Rk8UFoWG6R2hZ9U4kGDyEVrf81hp2aYReFrhisjGNwR4sHRpv6wfQ#NODvlYxrOkrsr#" +
		"b#LlD$aVPSvkTHTLG7rbOVF9yZvOppsqUsV2V97Z45xcfjrpFf0n0jTb7i$o2$Bb$4SBUyH" +
		"4Hybrw7PiW#FsKR4URWEsss8JCjnTypX8cw7FVjkvuJh5kjrjZKQSuhiaps6YNZaToBUgv#" +
		"CAsJyXeX7jPQndFj6tIVYqRBUqQDaBCVfw2z5l7SF6SlwzfPuhFTacyxMyGVjc8mzTWV3M6" +
		"yzNCGZjBt6KCr$EzmZui2dCtLq6AYbNv8nhYdoCETqmFLsdZO7Ti1UFE$dJ1txD97r30xds" +
		"zB#9$BxCWt2l1DNohA7oVXscI$t7YUk3cJpfQ#S#2BgVmNnH$9yOo0pOqYGtaVk0SOC3VB6" +
		"d2VZJuAyVJj9d9TeTM7kFfBVqpaeoBFbt3y0UzXyVnqHUNdydkG4aUuWvwXzoqNiI3yUseJ" +
		"hutjqhUudHTmOxScVgzMFVVRss9ldZnRtJ$EBm$NjXkkCtUMwFfJV4yMrVVwbOHa7r$qfwQ" +
		"Fj1ecuFUQMVFHd$frQNO#B#FzQETFOgeem3C$PoYNHn4I9EvJRS$yP4q6C2KP$rGWbnW2HO" +
		"E8F4Wa9CRA8MDPUbA3iifc28bkX2eH5eOYA29GIfQ2050IAYY389eg8A8ZFp7otPqwfQA8a" +
		"Jzvlcs$EEPnjRc$R$GPt$FMWLlOr72KzdEDKqazoXvDOxzj5MHzaSrB76gtplNByXbajhPN" +
		"jTCx7c$NsxdHwzKtiBYSIEwlNYXohFkPpi9QtErDgjMyay$XM#vzDQegVjFfiIH8RDDFgNN" +
		"A#5gVUFvAwMyw8wlzFfwV#$sdJJlyym$gFwi#Rv7mkuHgBvThfUh$4BXAxKsBvz1nTwzD#n" +
		"yCoXdjhV9ySewUJV2ptizvLuXU3t9jwdxDQTbjB#tFj$bKqsvQu3Vl1UHqxp##AHObTzaow" +
		"leHrySEi5#DCEbwswjgvuWxqxfAEzQbD#sspJhsyDyPoNosxBBx#pEqvjckDiurR9JTS$wp" +
		"0sjqUI$SkbMTBHODJA$UFMAwPfsGDeZ#RYxT8JDOGCTTeFrbd3ZiclOwBohrfR7Lwpdnhgx" +
		"qoIMpijdHDzohft#Zi#wLqJVI8wwTplNewzZodXpo7ydTOpGwsMlA0#CtU0qhalIYMvs7kR" +
		"Xalxx3vXuYrSRRRUORasahFHgizv3ZckT$bsajCZcDUVrOZrqKFMSFqB4vwzPIrVKwUWzta" +
		"Mit9Uhxj9cVUmZEiwPdXvAG#srty6vrzbU#PPEkS#XwIcoh#GAl5Sc$CofYSh17A2$SzMMy" +
		"DVS9gBCTjjDohYvlMijZzfLU5z7AUw#sQhSkpLoKkzzeSxyETXyiSydwUlLLopZbGsAxsDx" +
		"dzPDmuTrvgvejVwjHCJEpSP8d9itd4FSrxflktacT5RXdRlVllwt8xwLMM#1qUjpg4#sp76" +
		"cjtalEnaxnBTvBtr0SFoNwQpvoadxoFvfgkeQIt$kV7Ng0yy0keFms1kagSWWBgK#M1Jz3p" +
		"zFUzPkFFDh$TLy0tJ2C#3T#IWL28X4AkoFXRgD$2k2esfmgxolpUjCOt$dZiyTIEnxTsAAg" +
		"995x8#Ue3GmX5wZJZJnF$ZBg9s1EnBHdHi2csdVctCtOxTZtnUiRNuzSRtoMIkD#Ktu7keF" +
		"uiSvp5tma$6ZprERrgoTUArZ1F3Ral3BwQJyryevf8BQPkCR75v2sHOFtTrEr1zn3RGw$l3" +
		"144WYzO$oZsKMhEiNtdgFl9KAH#LgqCv$7FSpmgcREIU2Npwx$KKSdOwTZJYKytTg1#eTS5" +
		"z0BzVZK4WYy4wY9ZBO6wXFv6Jys7#ByRFFKbyRtOUx4$CdylrmFV$BRzPFp9odSq5DLudcz" +
		"H#vX$7x46x0R6hKB$C0Ig72qdLqwFSkQs6WW5NnCwjRxaGicrblgCC$Q$KfX7zs$buEPixO" +
		"jiLvh0mHSDHQD$873gGndlsduBCLrVPCRlOlvTnDv5DUzXktn3R8KXKDNurUnJDVO6OXlGP" +
		"SGiaLg7hcEErUHMOwycjX1TI6mOjPhBs9U9rM7NKLT7ZRQ$DqHgAx6js4keMKAjLSiuSkF8" +
		"MVK5xMT4VVKIkOJ0iNKkR852F10YmolOccsCtOOUDtWG6ViAzXLqBRgM7llH$VWVqsiJkeb" +
		"p#8J1Xy3H48g4Z5fApLB6BYNt1ip1duEl#SeGgENeSlHjUcmaln7TJ6mpiK$eTmRx3FO1UX" +
		"vW#muGqnmXVeJQrmo1ceK$2ns3ZY6VH$ECoHixWa2D9ZOQ7SMOKTWMROTGY0VY5pbs9Eexk" +
		"L2jP$nwQWvX7yG#YBqINOc#YMhcafkB$c1GwYHwalpx1lrjM0zyLO5M45k4Ba8RqKRqQuCF" +
		"dZgC$GBw$7LusU3$ArwbLZF84AYPwF$9EmPVr3BK4AZ1w61o5i$mkY5G8z6Hw01q03e47M8" +
		"qL1Em9s1FHQUYKz0fw0pwp32QvXZ7#1XwYlmfeu4QYCsg73prhJ0FVnxwbjBVYlGKAmRmr1" +
		"fq3Re0NO1EGYUXmuKHmjY$0CAH3Ga=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	public ErrorReporting errorReporting;


	/** This list of definitions is used as a backup in case the parsing cannot build the AST up to
		the root node (typically, when the user is changing code). In this case, we use this
		tree instead of the root returned by the parser to build the outline. <p>
		We must take care not to add the children of elements which are also in this list. So,
		we use the "bTop" boolean to know if this definition should be added to the outline */
	public ArrayList<Def> recoverDefs = new ArrayList<Def>();

	public ArrayList<Def> recoverIdents = new ArrayList<Def>();

	/** backup a node, so as to be able to later recover from a parsing error */
	private void backupDef(Def def){
		recoverDefs.add(def);
		for(Def child: def.children)
			//child.bTop = false;
			unsetTop(child);

		// remove all identifiers that is used to build this def
		Region region = def.getFullRegion();
		ArrayList<Def> usedIdents = new ArrayList<Def>();
		for (Def ident: recoverIdents)
			if (ident.posStart >= region.getOffset()
					&& (ident.posEnd <= region.getOffset() + region.getLength()))
				usedIdents.add(ident);
		recoverIdents.removeAll(usedIdents);
	}

	// backup identifiers for later recovering from a parsing error,
	// some will be removed when they are used to build a Def sucessfully
	private void backupIdent(Def def) {
		recoverIdents.add(def);
	}

	private void unsetTop(Def def){
		def.bTop = false;
		for(Def child: def.children)
			unsetTop(child);
	}

	/** Can this variable name be a parameter? (that is, it starts with a lowercase letter) */
	public boolean isParameter(String name) {
		return name.length() > 0 && Character.isLowerCase(name.charAt(0));
	}

	private final Action[] actions;

	public OcamlParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = implementation
			RETURN2,	// [1] $goal = $interfaces interfaces; returns 'interfaces' although none is marked
			RETURN2,	// [2] $goal = $toplevel_phrase toplevel_phrase; returns 'toplevel_phrase' although none is marked
			RETURN2,	// [3] $goal = $use_file use_file; returns 'use_file' although none is marked
			new Action() {	// [4] implementation = impl_directive structure.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 2];
					
    	Def root = new Def("root", Def.Type.Root, 0, 0);
    	root.add(s);
    	root.collapse();
    	return root;
				}
			},
			new Action() {	// [5] implementation = impl_directive structure.s error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 2];
					
    	Def root = new Def("root", Def.Type.Root, 0, 0);
    	root.add(s);
    	root.collapse();
    	return root;
				}
			},
			new Action() {	// [6] interfaces = signature.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					
    	Def root = new Def("root", Def.Type.Root, 0, 0);
    	root.add(s);
    	root.collapse();
    	return root;
				}
			},
			new Action() {	// [7] toplevel_phrase = top_structure.t SEMISEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					 return t;
				}
			},
			new Action() {	// [8] toplevel_phrase = seq_expr.s SEMISEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return s;
				}
			},
			new Action() {	// [9] toplevel_phrase = toplevel_directive.d SEMISEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol d = _symbols[offset + 1];
					 return d;
				}
			},
			new Action() {	// [10] top_structure = structure_item.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					 return i;
				}
			},
			new Action() {	// [11] top_structure = structure_item.a top_structure.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [12] use_file = use_file_tail.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [13] use_file = seq_expr.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [14] use_file_tail = SEMISEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [15] use_file_tail = SEMISEMI seq_expr.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [16] use_file_tail = SEMISEMI structure_item.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [17] use_file_tail = SEMISEMI toplevel_directive.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [18] use_file_tail = structure_item.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [19] use_file_tail = toplevel_directive.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [20] module_expr = mod_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [21] module_expr = STRUCT.s structure.b END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	Def def = new Def("<structure>", Def.Type.Struct, s.getStart(), s.getEnd());
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [22] module_expr = STRUCT.a structure.s error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					
    	Def def = new Def("<structure>", Def.Type.Struct, a.getStart(), a.getEnd());
    	def.add(s);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [23] module_expr = FUNCTOR LPAREN UIDENT.i COLON module_type.a RPAREN MINUSGREATER module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 8];
					
    	Def def = new Def("<functor>", Def.Type.Functor, i.getStart(), i.getEnd());
    	def.add(a);
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [24] module_expr = module_expr.a LPAREN module_expr.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [25] module_expr = module_expr LPAREN module_expr error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [26] module_expr = LPAREN module_expr.a COLON module_type.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [27] module_expr = LPAREN module_expr COLON module_type error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [28] module_expr = LPAREN module_expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [29] module_expr = LPAREN module_expr error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [30] module_expr = LPAREN VAL expr.a COLON package_type.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [31] module_expr = LPAREN VAL expr COLON error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [32] structure = structure_tail.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return s;
				}
			},
			new Action() {	// [33] structure = seq_expr.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [34] structure_tail = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [35] structure_tail = SEMISEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [36] structure_tail = SEMISEMI seq_expr.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [37] structure_tail = SEMISEMI structure_item.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [38] structure_tail = structure_item.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [39] structure_tail = error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [40] structure_item = LET.l rec_flag.r let_bindings.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 3];
					
		Def da = (Def)a;
		Def rec = (Def)r;

  		// add the "rec" flag
  		ArrayList<Def> lets = new ArrayList<Def>();
  		da.findLets(lets);
  		for(Def let: lets)
  			let.bRec = rec.bRec;

		return a;
				}
			},
			new Action() {	// [41] structure_item = EXTERNAL val_ident.i COLON core_type.a EQUAL primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
		Def ident = (Def)i;
    	Def def = new Def(ident.name, Def.Type.External, ident.posStart, ident.posEnd);
    	def.add(a);
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [42] structure_item = TYPE type_declarations.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 2];
					 return t;
				}
			},
			new Action() {	// [43] structure_item = EXCEPTION UIDENT.id constructor_arguments.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 3];
					
    	Def def = new Def((String)id.value, Def.Type.Exception, id.getStart(), id.getEnd());
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [44] structure_item = EXCEPTION UIDENT.id EQUAL constr_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 4];
					
    	Def def = new Def((String)id.value, Def.Type.Exception, id.getStart(), id.getEnd());
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [45] structure_item = MODULE UIDENT.id module_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 3];
					
    	Def.Type type = Def.Type.Module;
    	assert a instanceof Def;
    	Def.Type aType = ((Def)a).type;
    	type = (aType == Def.Type.Identifier) ? Def.Type.ModuleAlias : type;
    	Def def = new Def((String)id.value, type, id.getStart(), id.getEnd());
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [46] structure_item = MODULE REC module_rec_bindings.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 3];
					 return a;
				}
			},
			new Action() {	// [47] structure_item = MODULE TYPE ident.id EQUAL module_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def ident = (Def)id;
    	Def def = new Def(ident.name, Def.Type.ModuleType, ident.posStart, ident.posEnd);
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [48] structure_item = OPEN mod_longident.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					
    	Def ident = (Def)id;
    	Def def = new Def(ident.name, Def.Type.Open, ident.posStart, ident.posEnd);
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [49] structure_item = CLASS class_declarations.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [50] structure_item = CLASS TYPE class_type_declarations.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 3];
					 return a;
				}
			},
			new Action() {	// [51] structure_item = INCLUDE module_expr.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					
    	Def ident = (Def)id;
    	if(ident.type == Def.Type.Identifier){
    		Def def = new Def(ident.name, Def.Type.Include, ident.posStart, ident.posEnd);
    		backupDef(def);
	    	return def;
	    }
	    return new Def();
				}
			},
			new Action() {	// [52] module_binding = EQUAL module_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [53] module_binding = COLON module_type.a EQUAL module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [54] module_binding = LPAREN UIDENT COLON module_type.a RPAREN module_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [55] module_rec_bindings = module_rec_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [56] module_rec_bindings = module_rec_bindings.a AND module_rec_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		Def db = (Def)b;
		db.bAnd = true;
  		return Def.root(a,b);
				}
			},
			new Action() {	// [57] module_rec_binding = UIDENT.id COLON module_type.a EQUAL module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	Def def = new Def((String)id.value, Def.Type.Module, id.getStart(), id.getEnd());
    	def.add(a);
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [58] module_type = mty_longident.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return id;
				}
			},
			new Action() {	// [59] module_type = SIG.s signature.a END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					
    	Def def = new Def("<signature>", Def.Type.Sig, s.getStart(), s.getEnd());
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [60] module_type = SIG signature error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [61] module_type = FUNCTOR LPAREN UIDENT.id COLON module_type.a RPAREN MINUSGREATER module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 8];
					
    	Def def = new Def((String)id.value, Def.Type.Functor, id.getStart(), id.getEnd());
    	def.add(a);
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [62] module_type = module_type.a WITH with_constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [63] module_type = MODULE TYPE OF module_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 4];
					 return a;
				}
			},
			new Action() {	// [64] module_type = LPAREN module_type.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [65] module_type = LPAREN module_type error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [66] signature = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [67] signature = signature.a signature_item.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [68] signature = signature.a signature_item.b SEMISEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [69] signature_item = VAL.v val_ident.id COLON core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol v = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 4];
					
    	Def ident = (Def)id;
    	Def def = new Def(ident.name, Def.Type.Let, ident.posStart, ident.posEnd);
    	def.add(a);
    	def.collapse();

  		// add the start position of the definition
  		def.defPosStart = v.getStart();

    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [70] signature_item = EXTERNAL.e val_ident.id COLON core_type.a EQUAL primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
    	Def ident = (Def)id;
    	Def def = new Def(ident.name, Def.Type.External, ident.posStart, ident.posEnd);
  		def.defPosStart = e.getStart();
    	def.add(a);
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [71] signature_item = TYPE.t type_declarations.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					
  		Def da = (Def)a;
  		Def first = da.findFirstOfType(Def.Type.Type);
  		first.defPosStart = t.getStart();

  		return a;
				}
			},
			new Action() {	// [72] signature_item = EXCEPTION.e UIDENT.id constructor_arguments.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol e = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 3];
					
    	Def def = new Def((String)id.value, Def.Type.Exception, id.getStart(), id.getEnd());
    	def.defPosStart = e.getStart();
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [73] signature_item = MODULE.m UIDENT.id module_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 3];
					
    	Def def = new Def((String)id.value, Def.Type.Module, id.getStart(), id.getEnd());
    	def.defPosStart = m.getStart();
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [74] signature_item = MODULE.m REC module_rec_declarations.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		Def first = da.findFirstOfType(Def.Type.Module);
  		first.defPosStart = m.getStart();

  		return a;
				}
			},
			new Action() {	// [75] signature_item = MODULE.m TYPE ident.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					
    	Def ident = (Def)id;
    	Def def = new Def(ident.name, Def.Type.ModuleType, ident.posStart, ident.posEnd);
    	def.defPosStart = m.getStart();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [76] signature_item = MODULE.m TYPE ident.id EQUAL module_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def ident = (Def)id;
    	Def def = new Def(ident.name, Def.Type.ModuleType, ident.posStart, ident.posEnd);
    	def.defPosStart = m.getStart();
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [77] signature_item = OPEN.o mod_longident.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					
    	Def ident = (Def)id;
    	Def def = new Def(ident.name, Def.Type.Open, ident.posStart, ident.posEnd);
    	def.defPosStart = o.getStart();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [78] signature_item = INCLUDE.i module_type.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					
    	Def ident = (Def)id;
    	if(ident.type == Def.Type.Identifier){
    		Def def = new Def(ident.name, Def.Type.Include, ident.posStart, ident.posEnd);
    		def.defPosStart = i.getStart();
    		backupDef(def);
	    	return def;
	    }
	    return new Def();
				}
			},
			new Action() {	// [79] signature_item = CLASS.c class_descriptions.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					
  		Def da = (Def)a;
  		Def first = da.findFirstOfType(Def.Type.Class);
  		first.defPosStart = c.getStart();

  		return a;
				}
			},
			new Action() {	// [80] signature_item = CLASS.c TYPE class_type_declarations.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		Def first = da.findFirstOfType(Def.Type.ClassType);
  		first.defPosStart = c.getStart();

  		return a;
				}
			},
			new Action() {	// [81] module_declaration = COLON module_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [82] module_declaration = LPAREN UIDENT COLON module_type.a RPAREN module_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [83] module_rec_declarations = module_rec_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [84] module_rec_declarations = module_rec_declarations.a AND.n module_rec_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		Def db = (Def)b;
  		db.defPosStart = n.getStart();
		db.bAnd = true;
  		return Def.root(a,b);
				}
			},
			new Action() {	// [85] module_rec_declaration = UIDENT.id COLON module_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 3];
					
    	Def def = new Def((String)id.value, Def.Type.Module, id.getStart(), id.getEnd());
    	def.add(a);
    	def.collapse();
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [86] class_declarations = class_declarations.a AND class_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		Def db = (Def)b;
		db.bAnd = true;
  		return Def.root(a,b);
				}
			},
			new Action() {	// [87] class_declarations = class_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [88] class_declaration = virtual_flag class_type_parameters.a LIDENT.id class_fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	Def def = new Def((String)id.value, Def.Type.Class, id.getStart(), id.getEnd());
    	def.add(a);
    	def.add(b);
    	def.collapse();
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [89] class_fun_binding = EQUAL class_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [90] class_fun_binding = COLON class_type.a EQUAL class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [91] class_fun_binding = labeled_simple_pattern.a class_fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [92] class_type_parameters = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [93] class_type_parameters = LBRACKET type_parameter_list.a RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [94] class_fun_def = labeled_simple_pattern.a MINUSGREATER class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [95] class_fun_def = labeled_simple_pattern.a class_fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [96] class_expr = class_simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [97] class_expr = FUN class_fun_def.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [98] class_expr = class_simple_expr.a simple_labeled_expr_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [99] class_expr = LET rec_flag.r let_bindings.a IN class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol r = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
  		Def da = (Def)a;
  		Def rec = (Def)r;

  		// transform the "lets" into "let ins" and add the "rec" flag
  		ArrayList<Def> lets = new ArrayList<Def>();
  		da.findLets(lets);
  		for(Def let: lets) {
  			let.type = Def.Type.LetIn;
  			let.bRec = rec.bRec;
  		}

  		if(lets.size() > 0){
  			Def last = lets.get(lets.size() - 1);
  			Def in = new Def("<in>", Def.Type.In, 0, 0);

  			in.add(b);
  			in.collapse();
  			last.children.add(in);
  			last.collapse();
  			backupDef(last);
  			return a;
  		}

  		return Def.root(a,b);
				}
			},
			new Action() {	// [100] class_simple_expr = LBRACKET core_type_comma_list.a RBRACKET class_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [101] class_simple_expr = class_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [102] class_simple_expr = OBJECT.o class_structure.a END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					
    	Def def = new Def("<object>", Def.Type.Object, o.getStart(), o.getEnd());
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [103] class_simple_expr = OBJECT class_structure error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [104] class_simple_expr = LPAREN class_expr.a COLON class_type.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [105] class_simple_expr = LPAREN class_expr COLON class_type error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [106] class_simple_expr = LPAREN class_expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [107] class_simple_expr = LPAREN class_expr error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [108] class_structure = class_self_pattern.a class_fields.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [109] class_self_pattern = LPAREN pattern.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [110] class_self_pattern = LPAREN pattern.a COLON core_type.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [111] class_self_pattern = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [112] class_fields = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [113] class_fields = class_fields.a INHERIT override_flag.b class_expr.c parent_binder.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 4];
					final Symbol d = _symbols[offset + 5];
					 return Def.root(a,b,c,d);
				}
			},
			new Action() {	// [114] class_fields = class_fields.a VAL.v virtual_value.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					
    	Def ident = (Def)id;
    	if(ident.type == Def.Type.Identifier){
    		Def def = new Def(ident.name, Def.Type.Val, ident.posStart, ident.posEnd);
    		def.defPosStart = v.getStart();
    		backupDef(def);
	    	return Def.root(a, def);
	    }
	    return Def.root(a,id);
				}
			},
			new Action() {	// [115] class_fields = class_fields.a VAL.v value.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					
    	Def ident = (Def)id;
    	if(ident.type == Def.Type.Identifier){
    		Def def = new Def(ident.name, Def.Type.Val, ident.posStart, ident.posEnd);
    		def.defPosStart = v.getStart();
    		backupDef(def);
	    	return Def.root(a, def);
	    }
	    return Def.root(a,id);
				}
			},
			new Action() {	// [116] class_fields = class_fields.a virtual_method.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [117] class_fields = class_fields.a concrete_method.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [118] class_fields = class_fields.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	Def def = new Def("<constraint>", Def.Type.Constraint, c.getStart(), c.getEnd());
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return Def.root(a, def);
				}
			},
			new Action() {	// [119] class_fields = class_fields.a INITIALIZER.i seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	Def def = new Def("initializer", Def.Type.Initializer, i.getStart(), i.getEnd());
    	def.defPosStart = i.getStart();
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return Def.root(a, def);
				}
			},
			new Action() {	// [120] parent_binder = AS LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					
    	return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [121] parent_binder = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [122] virtual_value = override_flag.o MUTABLE.m VIRTUAL label.id COLON core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 4];
					final Symbol a = _symbols[offset + 6];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Val, ident.posStart, ident.posEnd);
    	int pos = ((Def)o).posStart;
    	def.defPosStart = (pos != 0 ? pos : m.getStart());
    	def.add(a);
    	def.collapse();
    	def.bAlt = true;
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [123] virtual_value = VIRTUAL.v mutable_flag.m label.id COLON core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol v = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Val, ident.posStart, ident.posEnd);
    	def.defPosStart = v.getStart();
    	def.add(a);
    	def.collapse();
    	def.bAlt = ((Def)m).bAlt;
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [124] value = override_flag.o mutable_flag.m label.id EQUAL seq_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Val, ident.posStart, ident.posEnd);
    	int pos1 = ((Def)o).posStart;
    	int pos2 = ((Def)m).posStart;
    	def.defPosStart = (pos1 != 0 ? pos1 : (pos2 != 0 ? pos2 : ident.posStart));
    	def.add(a);
    	def.collapse();
    	def.bAlt = ((Def)o).bAlt || ((Def)m).bAlt;
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [125] value = override_flag.o mutable_flag.m label.id type_constraint.a EQUAL seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Val, ident.posStart, ident.posEnd);
    	int pos1 = ((Def)o).posStart;
    	int pos2 = ((Def)m).posStart;
    	def.defPosStart = (pos1 != 0 ? pos1 : (pos2 != 0 ? pos2 : ident.posStart));
    	def.add(a);
    	def.add(b);
    	def.collapse();
    	def.bAlt = ((Def)o).bAlt || ((Def)m).bAlt;
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [126] virtual_method = METHOD.m override_flag.o PRIVATE VIRTUAL label.id COLON poly_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol o = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 5];
					final Symbol a = _symbols[offset + 7];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Method, ident.posStart, ident.posEnd);
    	def.defPosStart = m.getStart();
    	def.add(a);
    	def.collapse();
    	def.bAlt = true;
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [127] virtual_method = METHOD.m override_flag.o VIRTUAL private_flag.p label.id COLON poly_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol o = _symbols[offset + 2];
					final Symbol p = _symbols[offset + 4];
					final Symbol id = _symbols[offset + 5];
					final Symbol a = _symbols[offset + 7];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Method, ident.posStart, ident.posEnd);
    	def.defPosStart = m.getStart();
    	def.add(a);
    	def.collapse();
    	def.bAlt = ((Def)o).bAlt || ((Def)p).bAlt;
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [128] concrete_method = METHOD.m override_flag.o private_flag.p label.id strict_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol o = _symbols[offset + 2];
					final Symbol p = _symbols[offset + 3];
					final Symbol id = _symbols[offset + 4];
					final Symbol a = _symbols[offset + 5];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Method, ident.posStart, ident.posEnd);
    	def.defPosStart = m.getStart();
    	def.add(a);
    	def.collapse();
    	def.bAlt = ((Def)o).bAlt || ((Def)p).bAlt;
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [129] concrete_method = METHOD.m override_flag.o private_flag.p label.id COLON poly_type.a EQUAL seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol o = _symbols[offset + 2];
					final Symbol p = _symbols[offset + 3];
					final Symbol id = _symbols[offset + 4];
					final Symbol a = _symbols[offset + 6];
					final Symbol b = _symbols[offset + 8];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Method, ident.posStart, ident.posEnd);
    	def.defPosStart = m.getStart();
    	def.add(a);
    	def.add(b);
    	def.collapse();
    	def.bAlt = ((Def)o).bAlt || ((Def)p).bAlt;
    	backupDef(def);
	    return def;
				}
			},
			new Action() {	// [130] class_type = class_signature.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return s;
				}
			},
			new Action() {	// [131] class_type = QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 6];
					 return c;
				}
			},
			new Action() {	// [132] class_type = OPTLABEL simple_core_type_or_tuple MINUSGREATER class_type.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 4];
					 return c;
				}
			},
			new Action() {	// [133] class_type = LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 5];
					 return c;
				}
			},
			new Action() {	// [134] class_type = simple_core_type_or_tuple MINUSGREATER class_type.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol c = _symbols[offset + 3];
					 return c;
				}
			},
			new Action() {	// [135] class_signature = LBRACKET core_type_comma_list RBRACKET clty_longident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [136] class_signature = clty_longident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [137] class_signature = OBJECT.o class_sig_body.a END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					
    	Def def = new Def("<object>", Def.Type.Object, o.getStart(), o.getEnd());
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [138] class_signature = OBJECT class_sig_body error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [139] class_sig_body = class_self_type.a class_sig_fields.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [140] class_self_type = LPAREN core_type.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return Def.root(a);
				}
			},
			new Action() {	// [141] class_self_type = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [142] class_sig_fields = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [143] class_sig_fields = class_sig_fields.s INHERIT class_signature.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 3];
					 return Def.root(s,a);
				}
			},
			new Action() {	// [144] class_sig_fields = class_sig_fields.s VAL.v value_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol v = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		da.defPosStart = v.getStart();
  		return Def.root(s,a);
				}
			},
			new Action() {	// [145] class_sig_fields = class_sig_fields.s virtual_method_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					 return Def.root(s,a);
				}
			},
			new Action() {	// [146] class_sig_fields = class_sig_fields.s method_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					 return Def.root(s,a);
				}
			},
			new Action() {	// [147] class_sig_fields = class_sig_fields.s CONSTRAINT constrain.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 3];
					 return Def.root(s,a);
				}
			},
			new Action() {	// [148] value_type = VIRTUAL mutable_flag.m label.id COLON core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Val, ident.posStart, ident.posEnd);
	    def.add(a);
	    def.collapse();
    	def.bAlt = ((Def)m).bAlt;
	    backupDef(def);
	    return def;
				}
			},
			new Action() {	// [149] value_type = MUTABLE virtual_flag label.id COLON core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Val, ident.posStart, ident.posEnd);
	    def.add(a);
	    def.collapse();
    	def.bAlt = true;
	    backupDef(def);
	    return def;
				}
			},
			new Action() {	// [150] value_type = label.id COLON core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 3];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Val, ident.posStart, ident.posEnd);
	    def.add(a);
	    def.collapse();
	    backupDef(def);
	    return def;
				}
			},
			new Action() {	// [151] method_type = METHOD.m private_flag label.id COLON poly_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Method, ident.posStart, ident.posEnd);
    	def.defPosStart = m.getStart();
	    def.add(a);
	    def.collapse();
	    backupDef(def);
	    return def;
				}
			},
			new Action() {	// [152] virtual_method_type = METHOD.m PRIVATE VIRTUAL label.id COLON poly_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 4];
					final Symbol a = _symbols[offset + 6];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Method, ident.posStart, ident.posEnd);
    	def.defPosStart = m.getStart();
	    def.add(a);
	    def.collapse();
	    backupDef(def);
	    return def;
				}
			},
			new Action() {	// [153] virtual_method_type = METHOD.m VIRTUAL private_flag label.id COLON poly_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 4];
					final Symbol a = _symbols[offset + 6];
					
    	Def ident = (Def)id;
    	assert (ident.type == Def.Type.Identifier);
    	Def def = new Def(ident.name, Def.Type.Method, ident.posStart, ident.posEnd);
    	def.defPosStart = m.getStart();
	    def.add(a);
	    def.collapse();
	    backupDef(def);
	    return def;
				}
			},
			new Action() {	// [154] constrain = core_type.a EQUAL core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [155] class_descriptions = class_descriptions.a AND.n class_description.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		Def db = (Def)b;
  		db.defPosStart = n.getStart();
		db.bAnd = true;
  		return Def.root(a,b);
				}
			},
			new Action() {	// [156] class_descriptions = class_description.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [157] class_description = virtual_flag class_type_parameters LIDENT.id COLON class_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def def = new Def((String)id.value, Def.Type.Class, id.getStart(), id.getEnd());
	    def.add(a);
	    def.collapse();
	    backupDef(def);
	    return def;
				}
			},
			new Action() {	// [158] class_type_declarations = class_type_declarations.a AND.n class_type_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		Def db = (Def)b;
  		db.defPosStart = n.getStart();
		db.bAnd = true;
  		return Def.root(a,b);
				}
			},
			new Action() {	// [159] class_type_declarations = class_type_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [160] class_type_declaration = virtual_flag class_type_parameters LIDENT.id EQUAL class_signature.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def def = new Def((String)id.value, Def.Type.ClassType, id.getStart(), id.getEnd());
	    def.add(a);
	    def.collapse();
	    backupDef(def);
	    return def;
				}
			},
			new Action() {	// [161] seq_expr = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [162] seq_expr = expr.a SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [163] seq_expr = expr.a SEMI seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [164] labeled_simple_pattern = QUESTION LPAREN label_let_pattern.a opt_default.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [165] labeled_simple_pattern = QUESTION label_var.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [166] labeled_simple_pattern = OPTLABEL.id LPAREN let_pattern.a opt_default.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	Def ident = new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
    	return Def.root(ident,a,b);
				}
			},
			new Action() {	// [167] labeled_simple_pattern = OPTLABEL.id pattern_var.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					
    	Def ident = new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
    	return Def.root(ident,a);
				}
			},
			new Action() {	// [168] labeled_simple_pattern = TILDE LPAREN label_let_pattern.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 3];
					 return a;
				}
			},
			new Action() {	// [169] labeled_simple_pattern = TILDE label_var.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [170] labeled_simple_pattern = LABEL.id simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					
    	Def ident = new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
    	return Def.root(ident,a);
				}
			},
			new Action() {	// [171] labeled_simple_pattern = simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [172] pattern_var = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					
    	return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [173] pattern_var = UNDERSCORE.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					
    	return new Def("_", Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [174] opt_default = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [175] opt_default = EQUAL seq_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [176] label_let_pattern = label_var.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [177] label_let_pattern = label_var.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [178] label_var = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					
    	return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [179] let_pattern = pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [180] let_pattern = pattern.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [181] expr = simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [182] expr = simple_expr.a simple_labeled_expr_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [183] expr = LET rec_flag.r let_bindings.a IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol r = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
  		Def da = (Def)a;
  		Def rec = (Def)r;

  		// transform the "lets" into "let ins" and add the "rec" flag
  		ArrayList<Def> lets = new ArrayList<Def>();
  		da.findLets(lets);
  		for(Def let: lets){
  			let.type = Def.Type.LetIn;
  			let.bRec = rec.bRec;
  		}

  		if(lets.size() > 0){
  			Def last = lets.get(lets.size() - 1);
  			Def in = new Def("<in>", Def.Type.In, 0, 0);

  			in.add(b);
  			in.collapse();
  			last.children.add(in);
  			last.collapse();
  			backupDef(last);
  			return a;
  		}

  		return Def.root(a,b);
				}
			},
			new Action() {	// [184] expr = LET MODULE UIDENT.id module_binding.a IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
    	Def def = new Def((String)id.value, Def.Type.ModuleAlias, id.getStart(), id.getEnd());
    	def.add(a);
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [185] expr = LET OPEN mod_longident.id IN seq_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def ident = (Def)id;
    	Def def = new Def(ident.name, Def.Type.Open, ident.posStart, ident.posEnd);
		Def in = new Def("<in>", Def.Type.In, 0, 0);
		in.add(a);
		in.collapse();
		def.children.add(in);
		def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [186] expr = FUNCTION opt_bar.a match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [187] expr = FUN labeled_simple_pattern.a fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		// find the identifiers defined in this pattern, and
  		// transform them into "parameter" nodes
  		ArrayList<Def> idents = new ArrayList<Def>();
    	Def pat = (Def)a;
    	pat.findIdents(idents);

    	Def root = new Def();

    	Def last = null;
    	boolean bFirst = true;
    	for(int i = 0; i < idents.size(); i++){
    		Def ident = idents.get(i);
    		if(isParameter(ident.name)) {
	    		Def def = new Def(ident.name, Def.Type.Parameter, ident.posStart, ident.posEnd);
	    		if(!bFirst)
	    			def.bAnd = true;
	    		bFirst = false;
	    		root.add(def);
	    		last = def;
    		} else {
	    		Def def = new Def(ident.name, Def.Type.Identifier, ident.posStart, ident.posEnd);
	    		root.add(def);
    		}
    	}

    	if(last != null){
    		last.add(b);
    		last.collapse();
    		return root;
    	} else {
    		return Def.root(a, b);
    	}
				}
			},
			new Action() {	// [188] expr = FUN LPAREN TYPE LIDENT.id RPAREN fun_def.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 4];
					final Symbol a = _symbols[offset + 6];
					
    	Def root = new Def();
    	Def def = new Def((String)id.value, Def.Type.Parameter, id.getStart(), id.getEnd());
   		root.add(def);
   		def.add(a);
   		def.collapse();
   		return root;
				}
			},
			new Action() {	// [189] expr = MATCH seq_expr.a WITH opt_bar.b match_cases.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 5];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [190] expr = TRY seq_expr.a WITH opt_bar.b match_cases.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 5];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [191] expr = TRY seq_expr WITH error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [192] expr = expr_comma_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [193] expr = constr_longident.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [194] expr = name_tag.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [195] expr = IF seq_expr.a THEN expr.b ELSE expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 6];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [196] expr = IF seq_expr.a THEN expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [197] expr = WHILE seq_expr.a DO seq_expr.b DONE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [198] expr = FOR val_ident.ident EQUAL seq_expr.b direction_flag seq_expr.c DO seq_expr.d DONE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol ident = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 6];
					final Symbol d = _symbols[offset + 8];
					
	    Def i = (Def)ident;
	    Def def = new Def(i.name, Def.Type.Parameter, i.posStart, i.posEnd);
	    def.add(b);
	    def.add(c);
	    def.add(d);
	    def.collapse();
    	return def;
				}
			},
			new Action() {	// [199] expr = expr.a COLONCOLON expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [200] expr = LPAREN COLONCOLON RPAREN LPAREN expr.a COMMA expr.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 7];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [201] expr = expr.a INFIXOP0 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [202] expr = expr.a INFIXOP1 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [203] expr = expr.a INFIXOP2 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [204] expr = expr.a INFIXOP3 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [205] expr = expr.a INFIXOP4 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [206] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [207] expr = expr.a PLUSDOT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [208] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [209] expr = expr.a MINUSDOT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [210] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [211] expr = expr.a EQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [212] expr = expr.a LESS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [213] expr = expr.a GREATER expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [214] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [215] expr = expr.a BARBAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [216] expr = expr.a AMPERSAND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [217] expr = expr.a AMPERAMPER expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [218] expr = expr.a COLONEQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [219] expr = subtractive expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [220] expr = additive expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [221] expr = simple_expr.a DOT label_longident.b LESSMINUS expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 5];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [222] expr = simple_expr.a DOT LPAREN seq_expr.b RPAREN LESSMINUS expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 7];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [223] expr = simple_expr.a DOT LBRACKET seq_expr.b RBRACKET LESSMINUS expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 7];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [224] expr = simple_expr.a DOT LBRACE expr.b RBRACE LESSMINUS expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 7];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [225] expr = label.a LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [226] expr = ASSERT simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [227] expr = LAZY simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [228] expr = OBJECT.o class_structure.a END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					
    	Def def = new Def("<object>", Def.Type.Object, o.getStart(), o.getEnd());
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [229] expr = OBJECT class_structure error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [230] simple_expr = val_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [231] simple_expr = constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [232] simple_expr = constr_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [233] simple_expr = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [234] simple_expr = LPAREN seq_expr.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [235] simple_expr = LPAREN seq_expr.a error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [236] simple_expr = BEGIN seq_expr.a END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [237] simple_expr = BEGIN END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [238] simple_expr = BEGIN seq_expr.a error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [239] simple_expr = LPAREN seq_expr.a type_constraint.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [240] simple_expr = simple_expr.a DOT label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [241] simple_expr = mod_longident.a DOT LPAREN seq_expr.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [242] simple_expr = mod_longident.a DOT LPAREN seq_expr.b error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [243] simple_expr = simple_expr.a DOT LPAREN seq_expr.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [244] simple_expr = simple_expr.a DOT LPAREN seq_expr.b error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [245] simple_expr = simple_expr.a DOT LBRACKET seq_expr.b RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [246] simple_expr = simple_expr.a DOT LBRACKET seq_expr.b error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [247] simple_expr = simple_expr.a DOT LBRACE expr.b RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [248] simple_expr = simple_expr.a DOT LBRACE expr_comma_list.b error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [249] simple_expr = LBRACE record_expr.a RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [250] simple_expr = LBRACE record_expr.a error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [251] simple_expr = LBRACKETBAR expr_semi_list.a opt_semi.b BARRBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [252] simple_expr = LBRACKETBAR expr_semi_list.a opt_semi.b error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [253] simple_expr = LBRACKETBAR BARRBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [254] simple_expr = LBRACKET expr_semi_list.a opt_semi.b RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [255] simple_expr = LBRACKET expr_semi_list.a opt_semi.b error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [256] simple_expr = PREFIXOP simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [257] simple_expr = BANG simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [258] simple_expr = NEW class_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [259] simple_expr = LBRACELESS field_expr_list.a opt_semi.b GREATERRBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [260] simple_expr = LBRACELESS field_expr_list.a opt_semi.b error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [261] simple_expr = LBRACELESS GREATERRBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [262] simple_expr = simple_expr.a SHARP label.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [263] simple_expr = LPAREN MODULE module_expr.a COLON package_type.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [264] simple_expr = LPAREN MODULE module_expr.a COLON error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 3];
					 return a;
				}
			},
			new Action() {	// [265] simple_labeled_expr_list = labeled_simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [266] simple_labeled_expr_list = simple_labeled_expr_list.a labeled_simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [267] labeled_simple_expr = simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [268] labeled_simple_expr = label_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [269] label_expr = LABEL simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [270] label_expr = TILDE label_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [271] label_expr = QUESTION label_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [272] label_expr = OPTLABEL simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [273] label_ident = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					
    	return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [274] let_bindings = let_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					 return b;
				}
			},
			new Action() {	// [275] let_bindings = let_bindings.a AND let_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		Def db = (Def)b;
		db.bAnd = true;
  		return Def.root(a,b);
				}
			},
			new Action() {	// [276] let_binding = val_ident.i fun_binding.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol f = _symbols[offset + 2];
					
    	Def ident = (Def)i;
    	Def def = new Def(ident.name, Def.Type.Let, ident.posStart, ident.posEnd);
    	def.add(f);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [277] let_binding = val_ident.i COLON typevar_list DOT core_type EQUAL seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					
    	Def ident = (Def)i;
    	Def def = new Def(ident.name, Def.Type.Let, ident.posStart, ident.posEnd);
    	def.add(b);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [278] let_binding = pattern.p EQUAL seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol p = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		// find the identifiers defined in this pattern, and
  		// create and return a new node for them

  		ArrayList<Def> idents = new ArrayList<Def>();
    	Def pat = (Def)p;

    	pat.findIdents(idents);

    	Def root = new Def();

    	// update root position
    	int identsSize = idents.size();
    	if (identsSize > 1)
    	root.posStart = idents.get(0).posStart;
    	root.posEnd = idents.get(identsSize - 1).posEnd;

    	Def last = null;
    	for(int i = 0; i < idents.size(); i++){
    		Def ident = idents.get(i);

    		Def def = new Def(ident.name, Def.Type.Let, ident.posStart, ident.posEnd);
    		if(i != 0)
    			def.bAnd = true;

    		root.add(def);
    		last = def;
    	}

    	if(last != null){
    		last.add(b);
    		last.collapse();
    		backupDef(root);

    		return root;
    	}

    	return Def.root(p, b);
				}
			},
			new Action() {	// [279] fun_binding = strict_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [280] fun_binding = type_constraint.a EQUAL seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [281] strict_binding = EQUAL seq_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [282] strict_binding = labeled_simple_pattern.p fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol p = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		ArrayList<Def> idents = new ArrayList<Def>();
    	Def pat = (Def)p;

    	pat.findIdents(idents);

    	Def root = new Def();

    	// update root position
    	int identsSize = idents.size();
    	if (identsSize > 1)
    	root.posStart = idents.get(0).posStart;
    	root.posEnd = idents.get(identsSize - 1).posEnd;

    	Def last = null;
    	boolean bFirst = true;
    	for(int i = 0; i < idents.size(); i++){
    		Def ident = idents.get(i);
    		if(isParameter(ident.name)) {
	    		Def def = new Def(ident.name, Def.Type.Parameter, ident.posStart, ident.posEnd);
	    		if(!bFirst)
	    			def.bAnd = true;
	    		bFirst = false;
	    		root.add(def);
	    		last = def;
    		} else {
	    		Def def = new Def(ident.name, Def.Type.Identifier, ident.posStart, ident.posEnd);
	    		root.add(def);
    		}
    	}

    	if(last != null){
    		last.add(b);
    		last.collapse();
    		backupDef(root);
    		return root;
    	}

    	return Def.root(p, b);
				}
			},
			new Action() {	// [283] strict_binding = LPAREN TYPE LIDENT.id RPAREN fun_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def root = new Def();
    	Def def = new Def((String)id.value, Def.Type.Parameter, id.getStart(), id.getEnd());
   		root.add(def);
   		def.add(a);
   		def.collapse();
   		return root;
				}
			},
			new Action() {	// [284] match_cases = pattern.p match_action.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol p = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		// find the identifiers defined in this pattern, and
  		// create and return a new node for them

  		ArrayList<Def> idents = new ArrayList<Def>();
    	Def pat = (Def)p;

    	pat.findIdents(idents);

    	Def root = new Def();

    	Def last = null;
    	boolean bFirst = true;
    	for(int i = 0; i < idents.size(); i++){
    		Def ident = idents.get(i);
    		if(isParameter(ident.name)) {
	    		Def def = new Def(ident.name, Def.Type.Parameter, ident.posStart, ident.posEnd);
	    		if(!bFirst)
	    			def.bAnd = true;
	    		bFirst = false;
	    		root.add(def);
	    		last = def;
    		} else {
	    		Def def = new Def(ident.name, Def.Type.Identifier, ident.posStart, ident.posEnd);
	    		root.add(def);
    		}
    	}

    	if(last != null){
    		last.add(b);
    		last.collapse();
    		return root;
    	}

    	return Def.root(p, b);
				}
			},
			new Action() {	// [285] match_cases = match_cases.a BAR pattern.b match_action.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 4];
					
  		// find the identifiers defined in this pattern, and
  		// create and return a new node for them

  		ArrayList<Def> idents = new ArrayList<Def>();
    	Def pat = (Def)b;

    	pat.findIdents(idents);

    	Def root = new Def();

    	Def last = null;
    	boolean bFirst = true;
    	for(int i = 0; i < idents.size(); i++){
    		Def ident = idents.get(i);
    		if(isParameter(ident.name)) {
	    		Def def = new Def(ident.name, Def.Type.Parameter, ident.posStart, ident.posEnd);
	    		if(!bFirst)
	    			def.bAnd = true;
	    		bFirst = false;
	    		root.add(def);
	    		last = def;
    		} else {
	    		Def def = new Def(ident.name, Def.Type.Identifier, ident.posStart, ident.posEnd);
	    		root.add(def);
    		}
    	}

    	if(last != null){
    		last.add(c);
    		last.collapse();
    		return Def.root(a, root);
    	}

    	return Def.root(a, b, c);
				}
			},
			new Action() {	// [286] fun_def = match_action.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [287] fun_def = labeled_simple_pattern.p fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol p = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		// find the identifiers defined in this pattern, and
  		// create and return a new node for them

  		ArrayList<Def> idents = new ArrayList<Def>();
    	Def pat = (Def)p;

    	pat.findIdents(idents);

    	Def root = new Def();

    	Def last = null;
    	boolean bFirst = true;
    	for(int i = 0; i < idents.size(); i++){
    		Def ident = idents.get(i);
    		if(isParameter(ident.name)) {
	    		Def def = new Def(ident.name, Def.Type.Parameter, ident.posStart, ident.posEnd);
	    		if(!bFirst)
	    			def.bAnd = true;
	    		bFirst = false;
	    		root.add(def);
	    		last = def;
    		} else {
	    		Def def = new Def(ident.name, Def.Type.Identifier, ident.posStart, ident.posEnd);
	    		root.add(def);
    		}
    	}

    	if(last != null){
    		last.add(b);
    		last.collapse();
    		return root;
    	}

    	return Def.root(root, b);
				}
			},
			new Action() {	// [288] fun_def = LPAREN TYPE LIDENT.id RPAREN fun_def.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 3];
					final Symbol a = _symbols[offset + 5];
					
    	Def root = new Def();
    	Def def = new Def((String)id.value, Def.Type.Parameter, id.getStart(), id.getEnd());
   		root.add(def);
   		def.add(a);
   		def.collapse();
   		return root;
				}
			},
			new Action() {	// [289] match_action = MINUSGREATER seq_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [290] match_action = WHEN seq_expr.a MINUSGREATER seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [291] expr_comma_list = expr_comma_list.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [292] expr_comma_list = expr.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [293] record_expr = simple_expr.a WITH lbl_expr_list.b opt_semi.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 4];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [294] record_expr = lbl_expr_list.a opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [295] lbl_expr_list = label_longident.a EQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [296] lbl_expr_list = label_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [297] lbl_expr_list = lbl_expr_list.a SEMI label_longident.b EQUAL expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 5];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [298] lbl_expr_list = lbl_expr_list.a SEMI label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [299] field_expr_list = label.a EQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [300] field_expr_list = field_expr_list.a SEMI label.b EQUAL expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 5];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [301] expr_semi_list = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [302] expr_semi_list = expr_semi_list.a SEMI expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [303] type_constraint = COLON core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [304] type_constraint = COLON core_type.a COLONGREATER core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [305] type_constraint = COLONGREATER core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [306] type_constraint = COLON error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [307] type_constraint = COLONGREATER error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [308] pattern = simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [309] pattern = pattern.a AS val_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [310] pattern = pattern_comma_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [311] pattern = constr_longident.a pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [312] pattern = name_tag.a pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [313] pattern = pattern.a COLONCOLON pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [314] pattern = LPAREN COLONCOLON RPAREN LPAREN pattern.a COMMA pattern.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 7];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [315] pattern = pattern.a BAR pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [316] pattern = LAZY simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [317] simple_pattern = val_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [318] simple_pattern = UNDERSCORE.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def("_", Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [319] simple_pattern = signed_constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [320] simple_pattern = CHAR DOTDOT CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [321] simple_pattern = constr_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [322] simple_pattern = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [323] simple_pattern = SHARP type_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [324] simple_pattern = LBRACE lbl_pattern_list.a record_pattern_end RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [325] simple_pattern = LBRACE lbl_pattern_list.a opt_semi error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [326] simple_pattern = LBRACKET pattern_semi_list.a opt_semi RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [327] simple_pattern = LBRACKET pattern_semi_list.a opt_semi error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [328] simple_pattern = LBRACKETBAR pattern_semi_list.a opt_semi BARRBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [329] simple_pattern = LBRACKETBAR BARRBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [330] simple_pattern = LBRACKETBAR pattern_semi_list.a opt_semi error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [331] simple_pattern = LPAREN pattern.a RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [332] simple_pattern = LPAREN pattern.a error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [333] simple_pattern = LPAREN pattern.a COLON core_type.b RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [334] simple_pattern = LPAREN pattern.a COLON core_type.b error
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [335] pattern_comma_list = pattern_comma_list.a COMMA pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [336] pattern_comma_list = pattern.a COMMA pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [337] pattern_semi_list = pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [338] pattern_semi_list = pattern_semi_list.a SEMI pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [339] lbl_pattern_list = label_longident.a EQUAL pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [340] lbl_pattern_list = label_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [341] lbl_pattern_list = lbl_pattern_list.a SEMI label_longident.b EQUAL pattern.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 5];
					 return Def.root(a,b,c);
				}
			},
			new Action() {	// [342] lbl_pattern_list = lbl_pattern_list.a SEMI label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [343] record_pattern_end = opt_semi.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [344] record_pattern_end = SEMI UNDERSCORE opt_semi.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 3];
					 return a;
				}
			},
			new Action() {	// [345] primitive_declaration = STRING
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [346] primitive_declaration = STRING primitive_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [347] type_declarations = type_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [348] type_declarations = type_declarations.a AND.n type_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		Def db = (Def)b;
		db.bAnd = true;
		db.defPosStart = n.getStart();
  		return Def.root(a,b);
				}
			},
			new Action() {	// [349] type_declaration = type_parameters LIDENT.id type_kind.a constraints
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					final Symbol a = _symbols[offset + 3];
					
    	Def def = new Def((String)id.value, Def.Type.Type, id.getStart(), id.getEnd());
    	def.add(a);
    	def.collapse();
    	backupDef(def);
    	return def;
				}
			},
			new Action() {	// [350] constraints = constraints CONSTRAINT constrain
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [351] constraints = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [352] type_kind = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [353] type_kind = EQUAL core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [354] type_kind = EQUAL PRIVATE core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [355] type_kind = EQUAL constructor_declarations.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [356] type_kind = EQUAL PRIVATE constructor_declarations.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 3];
					 return a;
				}
			},
			new Action() {	// [357] type_kind = EQUAL private_flag BAR constructor_declarations.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 4];
					 return a;
				}
			},
			new Action() {	// [358] type_kind = EQUAL private_flag LBRACE label_declarations.a opt_semi RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 4];
					 return a;
				}
			},
			new Action() {	// [359] type_kind = EQUAL core_type EQUAL private_flag opt_bar constructor_declarations.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 6];
					 return a;
				}
			},
			new Action() {	// [360] type_kind = EQUAL core_type EQUAL private_flag LBRACE label_declarations.a opt_semi RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 6];
					 return a;
				}
			},
			new Action() {	// [361] type_parameters = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [362] type_parameters = type_parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [363] type_parameters = LPAREN type_parameter_list RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [364] type_parameter = type_variance QUOTE ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [365] type_variance = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [366] type_variance = PLUS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [367] type_variance = MINUS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [368] type_parameter_list = type_parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [369] type_parameter_list = type_parameter_list COMMA type_parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [370] constructor_declarations = constructor_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [371] constructor_declarations = constructor_declarations.a BAR constructor_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [372] constructor_declaration = constr_ident.a constructor_arguments
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [373] constructor_arguments = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [374] constructor_arguments = OF core_type_list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [375] label_declarations = label_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [376] label_declarations = label_declarations.a SEMI label_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return Def.root(a,b);
				}
			},
			new Action() {	// [377] label_declaration = mutable_flag.m label.a COLON poly_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					
		// transform the generic identifier into a type constructor
		Def def = (Def) a;
		Def da = new Def(def.name, Def.Type.RecordTypeConstructor, def.posStart, def.posEnd);
    	int pos = ((Def)m).posStart;
    	da.defPosStart = (pos != 0 ? pos : def.posStart);
		return da;
				}
			},
			new Action() {	// [378] with_constraints = with_constraint
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [379] with_constraints = with_constraints AND with_constraint
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [380] with_constraint = TYPE type_parameters label_longident with_type_binder core_type constraints
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [381] with_constraint = TYPE type_parameters label_longident COLONEQUAL core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [382] with_constraint = MODULE mod_longident EQUAL mod_ext_longident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [383] with_constraint = MODULE mod_longident COLONEQUAL mod_ext_longident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [384] with_type_binder = EQUAL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [385] with_type_binder = EQUAL PRIVATE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [386] typevar_list = QUOTE ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [387] typevar_list = typevar_list QUOTE ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [388] poly_type = core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [389] poly_type = typevar_list DOT core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [390] core_type = core_type2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [391] core_type = core_type2 AS QUOTE ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [392] core_type2 = simple_core_type_or_tuple
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [393] core_type2 = QUESTION LIDENT COLON core_type2 MINUSGREATER core_type2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [394] core_type2 = OPTLABEL core_type2 MINUSGREATER core_type2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [395] core_type2 = LIDENT COLON core_type2 MINUSGREATER core_type2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [396] core_type2 = core_type2 MINUSGREATER core_type2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [397] simple_core_type = simple_core_type2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [398] simple_core_type = LPAREN core_type_comma_list RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [399] simple_core_type2 = QUOTE ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [400] simple_core_type2 = UNDERSCORE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [401] simple_core_type2 = type_longident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [402] simple_core_type2 = simple_core_type2 type_longident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [403] simple_core_type2 = LPAREN core_type_comma_list RPAREN type_longident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [404] simple_core_type2 = LESS meth_list GREATER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [405] simple_core_type2 = LESS GREATER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [406] simple_core_type2 = SHARP class_longident opt_present
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [407] simple_core_type2 = simple_core_type2 SHARP class_longident opt_present
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [408] simple_core_type2 = LPAREN core_type_comma_list RPAREN SHARP class_longident opt_present
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [409] simple_core_type2 = LBRACKET tag_field RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [410] simple_core_type2 = LBRACKET BAR row_field_list RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [411] simple_core_type2 = LBRACKET row_field BAR row_field_list RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [412] simple_core_type2 = LBRACKETGREATER opt_bar row_field_list RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [413] simple_core_type2 = LBRACKETGREATER RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [414] simple_core_type2 = LBRACKETLESS opt_bar row_field_list RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [415] simple_core_type2 = LBRACKETLESS opt_bar row_field_list GREATER name_tag_list RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [416] simple_core_type2 = LPAREN MODULE package_type RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [417] package_type = mty_longident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [418] package_type = mty_longident WITH package_type_cstrs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [419] package_type_cstr = TYPE LIDENT EQUAL core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [420] package_type_cstrs = package_type_cstr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [421] package_type_cstrs = package_type_cstr AND package_type_cstrs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [422] row_field_list = row_field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [423] row_field_list = row_field_list BAR row_field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [424] row_field = tag_field
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [425] row_field = simple_core_type2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [426] tag_field = name_tag OF opt_ampersand amper_type_list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [427] tag_field = name_tag
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [428] opt_ampersand = AMPERSAND
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [429] opt_ampersand = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [430] amper_type_list = core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [431] amper_type_list = amper_type_list AMPERSAND core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [432] opt_present = LBRACKETGREATER name_tag_list RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [433] opt_present = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [434] name_tag_list = name_tag
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [435] name_tag_list = name_tag_list name_tag
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [436] simple_core_type_or_tuple = simple_core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [437] simple_core_type_or_tuple = simple_core_type STAR core_type_list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [438] core_type_comma_list = core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [439] core_type_comma_list = core_type_comma_list COMMA core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [440] core_type_list = simple_core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [441] core_type_list = core_type_list STAR simple_core_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [442] meth_list = field SEMI meth_list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [443] meth_list = field opt_semi
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [444] meth_list = DOTDOT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [445] field = label COLON poly_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [446] label = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [447] constant = INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [448] constant = CHAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [449] constant = STRING
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [450] constant = FLOAT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [451] constant = INT32
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [452] constant = INT64
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [453] constant = NATIVEINT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [454] signed_constant = constant
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [455] signed_constant = MINUS INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [456] signed_constant = MINUS FLOAT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [457] signed_constant = MINUS INT32
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [458] signed_constant = MINUS INT64
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [459] signed_constant = MINUS NATIVEINT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [460] signed_constant = PLUS INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [461] signed_constant = PLUS FLOAT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [462] signed_constant = PLUS INT32
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [463] signed_constant = PLUS INT64
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [464] signed_constant = PLUS NATIVEINT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [465] ident = UIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					
		Def def = new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
		backupIdent(def);
		return def;
				}
			},
			new Action() {	// [466] ident = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					
		Def def = new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
		backupIdent(def);
		return def;
				}
			},
			new Action() {	// [467] val_ident = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					
		Def def = new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
		backupIdent(def);
		return def;
				}
			},
			new Action() {	// [468] val_ident = LPAREN operator.o RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 2];
					
    	Def op = (Def)o;
    	return new Def(op.name, Def.Type.Identifier, op.posStart, op.posEnd);
				}
			},
			new Action() {	// [469] operator = PREFIXOP.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [470] operator = INFIXOP0.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [471] operator = INFIXOP1.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [472] operator = INFIXOP2.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [473] operator = INFIXOP3.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [474] operator = INFIXOP4.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [475] operator = BANG.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [476] operator = PLUS.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [477] operator = PLUSDOT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [478] operator = MINUS.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [479] operator = MINUSDOT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [480] operator = STAR.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [481] operator = EQUAL.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [482] operator = LESS.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [483] operator = GREATER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [484] operator = OR.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [485] operator = BARBAR.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [486] operator = AMPERSAND.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [487] operator = AMPERAMPER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [488] operator = COLONEQUAL.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [489] constr_ident = UIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					
    	Def def = new Def((String)id.value, Def.Type.TypeConstructor, id.getStart(), id.getEnd());
    	def.defPosStart = id.getStart();
    	return def;
				}
			},
			new Action() {	// [490] constr_ident = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Def("()", Def.Type.TypeConstructor, a.getStart(), b.getEnd());
				}
			},
			new Action() {	// [491] constr_ident = COLONCOLON.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Def("::", Def.Type.TypeConstructor, a.getStart(), a.getEnd());
				}
			},
			new Action() {	// [492] constr_ident = FALSE.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def("false", Def.Type.TypeConstructor, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [493] constr_ident = TRUE.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def("true", Def.Type.TypeConstructor, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [494] val_longident = val_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [495] val_longident = mod_longident.a DOT val_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		Def db = (Def)b;
  		return new Def(da.name + "." + db.name, Def.Type.Identifier, da.posStart, db.posEnd);
				}
			},
			new Action() {	// [496] constr_longident = mod_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [497] constr_longident = LBRACKET RBRACKET
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [498] constr_longident = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Def("()", Def.Type.Identifier, a.getStart(), b.getEnd());
				}
			},
			new Action() {	// [499] constr_longident = FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [500] constr_longident = TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [501] label_longident = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [502] label_longident = mod_longident.a DOT LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		return new Def(da.name + "." + (String)id.value, Def.Type.Identifier, da.posStart, id.getEnd());
				}
			},
			new Action() {	// [503] type_longident = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [504] type_longident = mod_ext_longident.a DOT LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		return new Def(da.name + "." + (String)id.value, Def.Type.Identifier, da.posStart, id.getEnd());
				}
			},
			new Action() {	// [505] mod_longident = UIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [506] mod_longident = mod_longident.a DOT UIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		return new Def(da.name + "." + (String)id.value, Def.Type.Identifier, da.posStart, id.getEnd());
				}
			},
			new Action() {	// [507] mod_ext_longident = UIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [508] mod_ext_longident = mod_ext_longident.a DOT UIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		return new Def(da.name + "." + (String)id.value, Def.Type.Identifier, da.posStart, id.getEnd());
				}
			},
			new Action() {	// [509] mod_ext_longident = mod_ext_longident.a LPAREN mod_ext_longident.b RPAREN.par
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					final Symbol par = _symbols[offset + 4];
					
  		Def da = (Def)a;
  		Def db = (Def)b;
  		return new Def(da.name + "(" + db.name + ")", Def.Type.Identifier, da.posStart, par.getEnd());
				}
			},
			new Action() {	// [510] mty_longident = ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [511] mty_longident = mod_ext_longident.a DOT ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		Def db = (Def)b;
  		return new Def(da.name + "." + db.name, Def.Type.Identifier, da.posStart, db.posEnd);
				}
			},
			new Action() {	// [512] clty_longident = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [513] clty_longident = mod_ext_longident.a DOT LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		return new Def(da.name + "." + (String)id.value, Def.Type.Identifier, da.posStart, id.getEnd());
				}
			},
			new Action() {	// [514] class_longident = LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new Def((String)id.value, Def.Type.Identifier, id.getStart(), id.getEnd());
				}
			},
			new Action() {	// [515] class_longident = mod_longident.a DOT LIDENT.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					
  		Def da = (Def)a;
  		return new Def(da.name + "." + (String)id.value, Def.Type.Identifier, da.posStart, id.getEnd());
				}
			},
			new Action() {	// [516] toplevel_directive = SHARP ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [517] toplevel_directive = SHARP ident STRING
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [518] toplevel_directive = SHARP ident INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [519] toplevel_directive = SHARP ident val_longident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [520] toplevel_directive = SHARP ident FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [521] toplevel_directive = SHARP ident TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [522] impl_directive = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [523] impl_directive = impl_directive impl_directive_item opt_semi
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [524] impl_directive_item = SHARP ident
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [525] impl_directive_item = SHARP ident STRING
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [526] impl_directive_item = SHARP INCLUDE STRING
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [527] name_tag = BACKQUOTE ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [528] rec_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [529] rec_flag = REC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 Def def = new Def(); def.bRec = true; return def;
				}
			},
			new Action() {	// [530] direction_flag = TO
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [531] direction_flag = DOWNTO
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [532] private_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [533] private_flag = PRIVATE.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol p = _symbols[offset + 1];
					 Def def = new Def(); def.bAlt=true; def.posStart = p.getStart(); return def;
				}
			},
			new Action() {	// [534] mutable_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [535] mutable_flag = MUTABLE.m
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol m = _symbols[offset + 1];
					 Def def = new Def(); def.bAlt=true; def.posStart = m.getStart(); return def;
				}
			},
			new Action() {	// [536] virtual_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [537] virtual_flag = VIRTUAL.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol v = _symbols[offset + 1];
					 Def def = new Def(); def.bAlt=true; def.posStart = v.getStart(); return def;
				}
			},
			new Action() {	// [538] override_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [539] override_flag = BANG.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol b = _symbols[offset + 1];
					 Def def = new Def(); def.bAlt=true; def.posStart = b.getStart(); return def;
				}
			},
			new Action() {	// [540] opt_bar = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [541] opt_bar = BAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [542] opt_semi = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [543] opt_semi = SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [544] subtractive = MINUS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [545] subtractive = MINUSDOT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [546] additive = PLUS
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			},
			new Action() {	// [547] additive = PLUSDOT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Def();
				}
			}
		};


	// override the default error reporting: do not print errors on stderr
	this.report = errorReporting = new ErrorReporting();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
